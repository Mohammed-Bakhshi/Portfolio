{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _deepmerge = _interopRequireDefault(require(\"@mui/utils/deepmerge\"));\nvar _cssVarsParser = _interopRequireDefault(require(\"./cssVarsParser\"));\nfunction prepareCssVars(theme) {\n  let parserConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector\n  } = parserConfig;\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = (0, _cssVarsParser.default)(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = (0, _cssVarsParser.default)(scheme, parserConfig);\n    themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = (0, _cssVarsParser.default)(defaultScheme, parserConfig);\n    themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n    if (selector?.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = `[${selector}=\"%s\"]`;\n    }\n    if (colorScheme) {\n      if (rule === 'media') {\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;\n        return {\n          [`@media (prefers-color-scheme: ${mode})`]: {\n            ':root': cssObject\n          }\n        };\n      }\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return `:root, ${rule.replace('%s', String(colorScheme))}`;\n        }\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n    return ':root';\n  }\n  const generateThemeVars = () => {\n    let vars = {\n      ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(_ref2 => {\n      let [, {\n        vars: schemeVars\n      }] = _ref2;\n      vars = (0, _deepmerge.default)(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: {\n            ...css\n          }\n        } : key);\n      }\n    }\n    insertStyleSheet(getSelector(undefined, {\n      ...rootCss\n    }), rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(colorScheme, {\n        ...finalCss\n      }), finalCss);\n    }\n    Object.entries(other).forEach(_ref3 => {\n      let [key, {\n        css\n      }] = _ref3;\n      const cssColorSheme = colorSchemes[key]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(key, {\n        ...finalCss\n      }), finalCss);\n    });\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nvar _default = exports.default = prepareCssVars;","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","_deepmerge","_cssVarsParser","prepareCssVars","theme","parserConfig","arguments","length","undefined","getSelector","defaultGetSelector","disableCssColorScheme","colorSchemeSelector","selector","colorSchemes","components","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","defaultScheme","otherColorSchemes","entries","forEach","_ref","key","scheme","colorScheme","cssObject","rule","startsWith","includes","mode","palette","replace","String","generateThemeVars","_ref2","schemeVars","generateStyleSheets","stylesheets","insertStyleSheet","keys","push","defaultSchemeVal","other","cssColorSheme","finalCss","_ref3","_default"],"sources":["C:/Users/Moham/Downloads/Github projects/Digital-Portfolio-main/Frontend/node_modules/@mui/system/cssVars/prepareCssVars.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _deepmerge = _interopRequireDefault(require(\"@mui/utils/deepmerge\"));\nvar _cssVarsParser = _interopRequireDefault(require(\"./cssVarsParser\"));\nfunction prepareCssVars(theme, parserConfig = {}) {\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector\n  } = parserConfig;\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = (0, _cssVarsParser.default)(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = (0, _cssVarsParser.default)(scheme, parserConfig);\n    themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = (0, _cssVarsParser.default)(defaultScheme, parserConfig);\n    themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n    if (selector?.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = `[${selector}=\"%s\"]`;\n    }\n    if (colorScheme) {\n      if (rule === 'media') {\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;\n        return {\n          [`@media (prefers-color-scheme: ${mode})`]: {\n            ':root': cssObject\n          }\n        };\n      }\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return `:root, ${rule.replace('%s', String(colorScheme))}`;\n        }\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n    return ':root';\n  }\n  const generateThemeVars = () => {\n    let vars = {\n      ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(([, {\n      vars: schemeVars\n    }]) => {\n      vars = (0, _deepmerge.default)(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: {\n            ...css\n          }\n        } : key);\n      }\n    }\n    insertStyleSheet(getSelector(undefined, {\n      ...rootCss\n    }), rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(colorScheme, {\n        ...finalCss\n      }), finalCss);\n    }\n    Object.entries(other).forEach(([key, {\n      css\n    }]) => {\n      const cssColorSheme = colorSchemes[key]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(key, {\n        ...finalCss\n      }), finalCss);\n    });\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nvar _default = exports.default = prepareCssVars;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Percent } from \"./Percent\";\nimport { Color } from \"./Color\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\n/**\r\n * @ignore\r\n */\nexport function waitForAnimations(animations) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (animations !== undefined) {\n      const promises = [];\n      $object.each(animations, (_, animation) => {\n        promises.push(animation.waitForStop());\n      });\n      yield Promise.all(promises);\n    }\n  });\n}\n/**\r\n * @ignore\r\n */\nexport function normalize(value, min, max) {\n  if (min === max) {\n    return 0;\n  } else {\n    return Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function range(diff, from, to) {\n  return from + diff * (to - from);\n}\n/**\r\n * @ignore\r\n */\nexport function defaultInterpolate(diff, from, to) {\n  if (diff >= 1) {\n    return to;\n  } else {\n    return from;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function percentInterpolate(diff, from, to) {\n  return new Percent(range(diff, from.percent, to.percent));\n}\n/**\r\n * @ignore\r\n */\nexport function colorInterpolate(diff, from, to) {\n  return Color.interpolate(diff, from, to);\n}\n/**\r\n * @ignore\r\n */\nexport function getInterpolate(from, to) {\n  if (typeof from === \"number\" && typeof to === \"number\") {\n    return range;\n  }\n  if (from instanceof Percent && to instanceof Percent) {\n    return percentInterpolate;\n  }\n  if (from instanceof Color && to instanceof Color) {\n    return colorInterpolate;\n  }\n  return defaultInterpolate;\n}\nexport var AnimationState;\n(function (AnimationState) {\n  AnimationState[AnimationState[\"Stopped\"] = 0] = \"Stopped\";\n  AnimationState[AnimationState[\"Playing\"] = 1] = \"Playing\";\n  AnimationState[AnimationState[\"Paused\"] = 2] = \"Paused\";\n})(AnimationState || (AnimationState = {}));\n/**\r\n * @ignore\r\n */\nexport class AnimationTime {\n  constructor(entity, duration) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_duration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_playingDuration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_startingTime\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_current\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_from\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_to\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"easing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._entity = entity;\n    this._duration = duration;\n  }\n  _stopEvent() {\n    const type = \"stopped\";\n    if (this.events.isEnabled(type)) {\n      this.events.dispatch(type, {\n        type: type,\n        target: this\n      });\n    }\n  }\n  _runAnimation(currentTime) {\n    if (this._playingDuration !== null) {\n      if (this._startingTime === null) {\n        this._startingTime = currentTime;\n        return AnimationState.Playing;\n      } else {\n        const diff = (currentTime - this._startingTime) / this._playingDuration;\n        if (diff >= 1) {\n          this._playingDuration = null;\n          this._startingTime = null;\n          this._from = this._to;\n          this._current = this._to;\n          this._entity.markDirty();\n          this._stopEvent();\n          const type = \"ended\";\n          if (this.events.isEnabled(type)) {\n            this.events.dispatch(type, {\n              type: type,\n              target: this\n            });\n          }\n          return AnimationState.Stopped;\n        } else {\n          this._current = range(diff, this._from, this._to);\n          this._entity.markDirty();\n          const type = \"progress\";\n          if (this.events.isEnabled(type)) {\n            this.events.dispatch(type, {\n              type: type,\n              target: this,\n              progress: diff\n            });\n          }\n          return AnimationState.Playing;\n        }\n      }\n    } else {\n      return AnimationState.Stopped;\n    }\n  }\n  _play() {\n    this._from = this._current;\n    if (this._playingDuration === null) {\n      this._entity._root._addAnimation(this);\n      const type = \"started\";\n      if (this.events.isEnabled(type)) {\n        this.events.dispatch(type, {\n          type: type,\n          target: this\n        });\n      }\n    } else {\n      this._startingTime = null;\n    }\n    this._playingDuration = Math.abs(this._to - this._from) * this._duration;\n  }\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n    if (this._duration !== value) {\n      this._duration = value;\n      if (value === 0) {\n        this.jumpTo(this._to);\n      } else if (this._current !== this._to) {\n        this._play();\n      }\n    }\n  }\n  get current() {\n    if (this.easing) {\n      return this.easing(this._current);\n    } else {\n      return this._current;\n    }\n  }\n  stop() {\n    this.jumpTo(this._current);\n  }\n  jumpTo(value) {\n    if (this._current !== value) {\n      this._entity.markDirty();\n    }\n    if (this._playingDuration !== null) {\n      this._stopEvent();\n    }\n    this._playingDuration = null;\n    this._startingTime = null;\n    this._current = value;\n    this._from = value;\n    this._to = value;\n  }\n  tweenTo(value) {\n    if (this._current === value || this._duration === 0) {\n      this.jumpTo(value);\n    } else {\n      if (this._to !== value) {\n        this._to = value;\n        this._play();\n      }\n    }\n  }\n}\n/*export class AnimationValue extends AnimationTime {\r\n    public _min: number;\r\n    public _max: number;\r\n\r\n    constructor(entity: Entity, duration: number, min: number, max: number) {\r\n        super(entity, duration);\r\n        this._min = min;\r\n        this._max = max;\r\n    }\r\n\r\n    public get min(): number {\r\n        return this._min;\r\n    }\r\n\r\n    public set min(value: number) {\r\n        if (this._min !== value) {\r\n            this._min = value;\r\n            this._entity.markDirty();\r\n        }\r\n    }\r\n\r\n    public get max(): number {\r\n        return this._max;\r\n    }\r\n\r\n    public set max(value: number) {\r\n        if (this._max !== value) {\r\n            this._max = value;\r\n            this._entity.markDirty();\r\n        }\r\n    }\r\n\r\n    public currentValue(): number {\r\n        return range(super.currentTime(), this._min, this._max);\r\n    }\r\n\r\n    public jumpToValue(value: number) {\r\n        super.jumpToTime(normalize(value, this._min, this._max));\r\n    }\r\n\r\n    public tweenToValue(value: number) {\r\n        super.tweenToTime(normalize(value, this._min, this._max));\r\n    }\r\n}\r\n*/","map":{"version":3,"names":["Percent","Color","EventDispatcher","$object","waitForAnimations","animations","undefined","promises","each","_","animation","push","waitForStop","Promise","all","normalize","value","min","max","Math","range","diff","from","to","defaultInterpolate","percentInterpolate","percent","colorInterpolate","interpolate","getInterpolate","AnimationState","AnimationTime","constructor","entity","duration","Object","defineProperty","_entity","_duration","_stopEvent","type","events","isEnabled","dispatch","target","_runAnimation","currentTime","_playingDuration","_startingTime","Playing","_from","_to","_current","markDirty","Stopped","progress","_play","_root","_addAnimation","abs","jumpTo","current","easing","stop","tweenTo"],"sources":["C:\\Users\\Moham\\Downloads\\Github projects\\Digital-Portfolio-main\\Frontend\\node_modules\\src\\.internal\\core\\util\\Animation.ts"],"sourcesContent":["import type { Entity, Animation } from \"./Entity\";\nimport { Percent } from \"./Percent\";\nimport { Color } from \"./Color\";\nimport type { Easing } from \"./Ease\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\n\nexport type Animations<T> = { [K in keyof T]?: Animation<T[K]> };\n\n/**\n * @ignore\n */\nexport async function waitForAnimations<T>(animations: Animations<T> | undefined): Promise<void> {\n\tif (animations !== undefined) {\n\t\tconst promises: Array<Promise<void>> = [];\n\n\t\t$object.each(animations, (_, animation) => {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n}\n\n\ninterface ITime {\n\treadonly tag: unique symbol;\n}\n\n/**\n * New type which allows for conversion from a number into a Time, but not from a Time to a number\n */\nexport type Time = number | ITime;\n\n\n/**\n * @ignore\n */\nexport function normalize(value: number, min: number, max: number): Time {\n\tif (min === max) {\n\t\treturn 0;\n\n\t} else {\n\t\treturn Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);\n\t}\n}\n\n/**\n * @ignore\n */\nexport function range(diff: Time, from: number, to: number): number {\n\treturn from + (diff as number * (to - from));\n}\n\n/**\n * @ignore\n */\nexport function defaultInterpolate<A, B>(diff: Time, from: A, to: B): A | B {\n\tif (diff >= 1) {\n\t\treturn to;\n\n\t} else {\n\t\treturn from;\n\t}\n}\n\n/**\n * @ignore\n */\nexport function percentInterpolate(diff: Time, from: Percent, to: Percent): Percent {\n\treturn new Percent(range(diff, from.percent, to.percent));\n}\n\n/**\n * @ignore\n */\nexport function colorInterpolate(diff: Time, from: Color, to: Color): Color {\n\treturn Color.interpolate(diff, from, to);\n}\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: number, to: number): typeof range;\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: Percent, to: Percent): typeof percentInterpolate;\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: any, to: any): typeof defaultInterpolate;\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: any, to: any): (diff: Time, from: any, to: any) => any {\n\tif (typeof from === \"number\" && typeof to === \"number\") {\n\t\treturn range;\n\t}\n\n\tif (from instanceof Percent && to instanceof Percent) {\n\t\treturn percentInterpolate;\n\t}\n\n\tif (from instanceof Color && to instanceof Color) {\n\t\treturn colorInterpolate;\n\t}\n\n\treturn defaultInterpolate;\n}\n\n\nexport enum AnimationState {\n\tStopped,\n\tPlaying,\n\tPaused,\n}\n\nexport interface IAnimation {\n\t_runAnimation(_currentTime: number): AnimationState;\n}\n\n\n/**\n * @ignore\n */\nexport interface IEntityEvents {\n\tstarted: {};\n\tstopped: {};\n\t// TODO replace this with stopped\n\tended: {};\n\tprogress: { progress: number };\n}\n\n/**\n * @ignore\n */\nexport class AnimationTime implements IAnimation {\n\tprotected _entity: Entity;\n\tprotected _duration: number;\n\n\tprotected _playingDuration: number | null = null;\n\tprotected _startingTime: number | null = null;\n\tprotected _current: Time = 0;\n\tprotected _from: Time = 0;\n\tprotected _to: Time = 0;\n\n\tdeclare public _events: IEntityEvents;\n\tpublic events: EventDispatcher<Events<this, this[\"_events\"]>> = new EventDispatcher();\n\n\tpublic easing: Easing | undefined;\n\n\tconstructor(entity: Entity, duration: number) {\n\t\tthis._entity = entity;\n\t\tthis._duration = duration;\n\t}\n\n\tprivate _stopEvent() {\n\t\tconst type = \"stopped\";\n\t\tif (this.events.isEnabled(type)) {\n\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t}\n\t}\n\n\tpublic _runAnimation(currentTime: number): AnimationState {\n\t\tif (this._playingDuration !== null) {\n\t\t\tif (this._startingTime === null) {\n\t\t\t\tthis._startingTime = currentTime;\n\t\t\t\treturn AnimationState.Playing;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst diff = (currentTime - this._startingTime) / this._playingDuration;\n\n\t\t\t\tif (diff >= 1) {\n\t\t\t\t\tthis._playingDuration = null;\n\t\t\t\t\tthis._startingTime = null;\n\t\t\t\t\tthis._from = this._to;\n\t\t\t\t\tthis._current = this._to;\n\t\t\t\t\tthis._entity.markDirty();\n\t\t\t\t\tthis._stopEvent();\n\t\t\t\t\tconst type = \"ended\";\n\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t\t\t}\n\t\t\t\t\treturn AnimationState.Stopped;\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._current = range(diff, this._from as number, this._to as number);\n\t\t\t\t\tthis._entity.markDirty();\n\n\t\t\t\t\tconst type = \"progress\";\n\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this, progress: diff });\n\t\t\t\t\t}\n\n\t\t\t\t\treturn AnimationState.Playing;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn AnimationState.Stopped;\n\t\t}\n\t}\n\n\tprivate _play() {\n\t\tthis._from = this._current;\n\n\t\tif (this._playingDuration === null) {\n\t\t\tthis._entity._root._addAnimation(this);\n\n\t\t\tconst type = \"started\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis._startingTime = null;\n\t\t}\n\n\t\tthis._playingDuration = Math.abs((this._to as number) - (this._from as number)) * this._duration;\n\t}\n\n\tpublic get duration(): number {\n\t\treturn this._duration;\n\t}\n\n\tpublic set duration(value: number) {\n\t\tif (this._duration !== value) {\n\t\t\tthis._duration = value;\n\n\t\t\tif (value === 0) {\n\t\t\t\tthis.jumpTo(this._to);\n\n\t\t\t} else if (this._current !== this._to) {\n\t\t\t\tthis._play();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get current(): Time {\n\t\tif (this.easing) {\n\t\t\treturn this.easing(this._current);\n\n\t\t} else {\n\t\t\treturn this._current;\n\t\t}\n\t}\n\n\tpublic stop() {\n\t\tthis.jumpTo(this._current);\n\t}\n\n\tpublic jumpTo(value: Time) {\n\t\tif (this._current !== value) {\n\t\t\tthis._entity.markDirty();\n\t\t}\n\n\t\tif (this._playingDuration !== null) {\n\t\t\tthis._stopEvent();\n\t\t}\n\n\t\tthis._playingDuration = null;\n\t\tthis._startingTime = null;\n\t\tthis._current = value;\n\t\tthis._from = value;\n\t\tthis._to = value;\n\t}\n\n\tpublic tweenTo(value: Time) {\n\t\tif (this._current === value || this._duration === 0) {\n\t\t\tthis.jumpTo(value);\n\n\t\t} else {\n\t\t\tif (this._to !== value) {\n\t\t\t\tthis._to = value;\n\t\t\t\tthis._play();\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/*export class AnimationValue extends AnimationTime {\n\tpublic _min: number;\n\tpublic _max: number;\n\n\tconstructor(entity: Entity, duration: number, min: number, max: number) {\n\t\tsuper(entity, duration);\n\t\tthis._min = min;\n\t\tthis._max = max;\n\t}\n\n\tpublic get min(): number {\n\t\treturn this._min;\n\t}\n\n\tpublic set min(value: number) {\n\t\tif (this._min !== value) {\n\t\t\tthis._min = value;\n\t\t\tthis._entity.markDirty();\n\t\t}\n\t}\n\n\tpublic get max(): number {\n\t\treturn this._max;\n\t}\n\n\tpublic set max(value: number) {\n\t\tif (this._max !== value) {\n\t\t\tthis._max = value;\n\t\t\tthis._entity.markDirty();\n\t\t}\n\t}\n\n\tpublic currentValue(): number {\n\t\treturn range(super.currentTime(), this._min, this._max);\n\t}\n\n\tpublic jumpToValue(value: number) {\n\t\tsuper.jumpToTime(normalize(value, this._min, this._max));\n\t}\n\n\tpublic tweenToValue(value: number) {\n\t\tsuper.tweenToTime(normalize(value, this._min, this._max));\n\t}\n}\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
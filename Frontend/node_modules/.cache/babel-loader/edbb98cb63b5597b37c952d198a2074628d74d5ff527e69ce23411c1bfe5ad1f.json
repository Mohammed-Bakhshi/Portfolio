{"ast":null,"code":"import { EventDispatcher } from \"./EventDispatcher\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $object from \"./Object\";\nimport * as $type from \"./Type\";\nfunction disposeSettings(settings) {\n  $object.each(settings, (_key, value) => {\n    if ($type.isObject(value) && typeof value.dispose === \"function\") {\n      value.enableDispose = true;\n      value.dispose();\n    }\n  });\n}\nexport class TemplateState {\n  constructor(name, template, settings) {\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._name = name;\n    this._template = template;\n    this._settings = settings;\n  }\n  _dispose() {\n    disposeSettings(this._settings);\n  }\n  get(key, fallback) {\n    const value = this._settings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  set(key, value) {\n    this._settings[key] = value;\n    // TODO maybe only do this if the value changed ?\n    this._template._stateChanged(this._name);\n  }\n  remove(key) {\n    delete this._settings[key];\n    // TODO maybe only do this if the value changed ?\n    this._template._stateChanged(this._name);\n  }\n  setAll(settings) {\n    $object.keys(settings).forEach(key => {\n      this._settings[key] = settings[key];\n    });\n    this._template._stateChanged(this._name);\n  }\n  _apply(other, seen) {\n    $object.each(this._settings, (key, value) => {\n      if (!seen[key] && !other._userSettings[key]) {\n        seen[key] = true;\n        other.setRaw(key, value);\n      }\n    });\n  }\n}\nexport class TemplateStates {\n  constructor(template) {\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._template = template;\n  }\n  _dispose() {\n    $object.each(this._states, (_key, state) => {\n      state._dispose();\n    });\n  }\n  lookup(name) {\n    return this._states[name];\n  }\n  create(name, settings) {\n    const state = this._states[name];\n    if (state) {\n      state.setAll(settings);\n      return state;\n    } else {\n      const state = new TemplateState(name, this._template, settings);\n      this._states[name] = state;\n      this._template._stateChanged(name);\n      return state;\n    }\n  }\n  remove(name) {\n    delete this._states[name];\n    this._template._stateChanged(name);\n  }\n  _apply(entity, state) {\n    $object.each(this._states, (key, value) => {\n      let seen = state.states[key];\n      if (seen == null) {\n        seen = state.states[key] = {};\n      }\n      const other = entity.states.create(key, {});\n      value._apply(other, seen);\n    });\n  }\n}\nexport class TemplateAdapters {\n  constructor() {\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  add(key, callback) {\n    let callbacks = this._callbacks[key];\n    if (callbacks === undefined) {\n      callbacks = this._callbacks[key] = [];\n    }\n    callbacks.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(callbacks, callback);\n      if (callbacks.length === 0) {\n        delete this._callbacks[key];\n      }\n    });\n  }\n  remove(key) {\n    const callbacks = this._callbacks[key];\n    if (callbacks !== undefined) {\n      delete this._callbacks[key];\n    }\n  }\n  _apply(entity) {\n    const disposers = [];\n    $object.each(this._callbacks, (key, callbacks) => {\n      $array.each(callbacks, callback => {\n        disposers.push(entity.adapters.add(key, callback));\n      });\n    });\n    return new MultiDisposer(disposers);\n  }\n}\n// TODO maybe extend from Properties ?\nexport class Template {\n  constructor(settings, isReal) {\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    // TODO code duplication with Properties\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entities\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateStates(this)\n    });\n    Object.defineProperty(this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateAdapters()\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"setup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n    this._settings = settings;\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n  static new(settings) {\n    return new Template(settings, true);\n  }\n  _dispose() {\n    disposeSettings(this._settings);\n    disposeSettings(this._privateSettings);\n  }\n  /**\r\n   * Returns `true` if this element is disposed.\r\n   *\r\n   * @return Disposed\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes this object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n  _checkDisposed() {\n    if (this._disposed) {\n      throw new Error(\"Template is disposed\");\n    }\n  }\n  /**\r\n   * Array of all entities using this template.\r\n   */\n  get entities() {\n    return this._entities;\n  }\n  get(key, fallback) {\n    this._checkDisposed();\n    const value = this._settings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  setRaw(key, value) {\n    this._checkDisposed();\n    this._settings[key] = value;\n  }\n  set(key, value) {\n    this._checkDisposed();\n    if (this._settings[key] !== value) {\n      this.setRaw(key, value);\n      this._entities.forEach(entity => {\n        entity._setTemplateProperty(this, key, value);\n      });\n    }\n  }\n  remove(key) {\n    this._checkDisposed();\n    if (key in this._settings) {\n      delete this._settings[key];\n      this._entities.forEach(entity => {\n        entity._removeTemplateProperty(key);\n      });\n    }\n  }\n  removeAll() {\n    this._checkDisposed();\n    $object.each(this._settings, (key, _value) => {\n      this.remove(key);\n    });\n  }\n  getPrivate(key, fallback) {\n    this._checkDisposed();\n    const value = this._privateSettings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  setPrivateRaw(key, value) {\n    this._checkDisposed();\n    this._privateSettings[key] = value;\n    return value;\n  }\n  setPrivate(key, value) {\n    this._checkDisposed();\n    if (this._privateSettings[key] !== value) {\n      this.setPrivateRaw(key, value);\n      this._entities.forEach(entity => {\n        entity._setTemplatePrivateProperty(this, key, value);\n      });\n    }\n    return value;\n  }\n  removePrivate(key) {\n    this._checkDisposed();\n    if (key in this._privateSettings) {\n      delete this._privateSettings[key];\n      this._entities.forEach(entity => {\n        entity._removeTemplatePrivateProperty(key);\n      });\n    }\n  }\n  setAll(value) {\n    this._checkDisposed();\n    $object.each(value, (key, value) => {\n      this.set(key, value);\n    });\n  }\n  // TODO code duplication with Properties\n  on(key, callback) {\n    this._checkDisposed();\n    let events = this._settingEvents[key];\n    if (events === undefined) {\n      events = this._settingEvents[key] = [];\n    }\n    events.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(events, callback);\n      if (events.length === 0) {\n        delete this._settingEvents[key];\n      }\n    });\n  }\n  // TODO code duplication with Properties\n  onPrivate(key, callback) {\n    this._checkDisposed();\n    let events = this._privateSettingEvents[key];\n    if (events === undefined) {\n      events = this._privateSettingEvents[key] = [];\n    }\n    events.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(events, callback);\n      if (events.length === 0) {\n        delete this._privateSettingEvents[key];\n      }\n    });\n  }\n  _apply(entity, state) {\n    this._checkDisposed();\n    const disposers = [];\n    $object.each(this._settingEvents, (key, events) => {\n      $array.each(events, event => {\n        disposers.push(entity.on(key, event));\n      });\n    });\n    $object.each(this._privateSettingEvents, (key, events) => {\n      $array.each(events, event => {\n        disposers.push(entity.onPrivate(key, event));\n      });\n    });\n    this.states._apply(entity, state);\n    disposers.push(this.adapters._apply(entity));\n    disposers.push(entity.events.copyFrom(this.events));\n    return new MultiDisposer(disposers);\n  }\n  _setObjectTemplate(entity) {\n    this._checkDisposed();\n    this._entities.push(entity);\n  }\n  _removeObjectTemplate(entity) {\n    //this._checkDisposed();\n    $array.remove(this._entities, entity);\n  }\n  _stateChanged(name) {\n    this._checkDisposed();\n    this._entities.forEach(entity => {\n      entity._applyStateByKey(name);\n    });\n  }\n}","map":{"version":3,"names":["EventDispatcher","Disposer","MultiDisposer","$array","$object","$type","disposeSettings","settings","each","_key","value","isObject","dispose","enableDispose","TemplateState","constructor","name","template","Object","defineProperty","_name","_template","_settings","_dispose","get","key","fallback","undefined","set","_stateChanged","remove","setAll","keys","forEach","_apply","other","seen","_userSettings","setRaw","TemplateStates","_states","state","lookup","create","entity","states","TemplateAdapters","add","callback","callbacks","_callbacks","push","removeFirst","length","disposers","adapters","Template","isReal","Error","new","_privateSettings","isDisposed","_disposed","_checkDisposed","entities","_entities","_setTemplateProperty","_removeTemplateProperty","removeAll","_value","getPrivate","setPrivateRaw","setPrivate","_setTemplatePrivateProperty","removePrivate","_removeTemplatePrivateProperty","on","events","_settingEvents","onPrivate","_privateSettingEvents","event","copyFrom","_setObjectTemplate","_removeObjectTemplate","_applyStateByKey"],"sources":["C:\\Users\\Moham\\Downloads\\Github projects\\Digital-Portfolio-main\\Frontend\\node_modules\\src\\.internal\\core\\util\\Template.ts"],"sourcesContent":["import type { Entity, Dirty } from \"./Entity\";\nimport type { State } from \"./States\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport { IDisposer, Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $object from \"./Object\";\nimport * as $type from \"./Type\";\n\n\nfunction disposeSettings(settings: object) {\n\t$object.each(settings, (_key, value) => {\n\t\tif ($type.isObject(value) && typeof (value as any).dispose === \"function\") {\n\t\t\t(value as any).enableDispose = true;\n\t\t\t(value as any).dispose();\n\t\t}\n\t});\n}\n\n\nexport class TemplateState<E extends Entity> {\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\n\tprivate _name: string;\n\tprivate _template: Template<E>;\n\n\tconstructor(name: string, template: Template<E>, settings: Partial<E[\"_settings\"]>) {\n\t\tthis._name = name;\n\t\tthis._template = template;\n\t\tthis._settings = settings;\n\t}\n\n\tpublic _dispose() {\n\t\tdisposeSettings(this._settings);\n\t}\n\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\tpublic set<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._settings[key] = value;\n\t\t// TODO maybe only do this if the value changed ?\n\t\tthis._template._stateChanged(this._name);\n\t}\n\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._settings[key];\n\t\t// TODO maybe only do this if the value changed ?\n\t\tthis._template._stateChanged(this._name);\n\t}\n\n\tpublic setAll(settings: this[\"_settings\"]) {\n\t\t$object.keys(settings).forEach((key) => {\n\t\t\tthis._settings[key] = settings[key];\n\t\t});\n\n\t\tthis._template._stateChanged(this._name);\n\t}\n\n\tpublic _apply(other: State<E>, seen: Dirty<E[\"_settings\"]>): void {\n\t\t$object.each(this._settings, (key, value) => {\n\t\t\tif (!seen[key] && !other._userSettings[key]) {\n\t\t\t\tseen[key] = true;\n\t\t\t\tother.setRaw(key, value);\n\t\t\t}\n\t\t});\n\t}\n}\n\n\nexport class TemplateStates<E extends Entity> {\n\tprivate _template: Template<E>;\n\tprivate _states: { [key: string]: TemplateState<E> } = {};\n\n\tconstructor(template: Template<E>) {\n\t\tthis._template = template;\n\t}\n\n\tpublic _dispose() {\n\t\t$object.each(this._states, (_key, state) => {\n\t\t\tstate._dispose();\n\t\t});\n\t}\n\n\tpublic lookup(name: string): TemplateState<E> | undefined {\n\t\treturn this._states[name];\n\t}\n\n\tpublic create(name: string, settings: Partial<E[\"_settings\"]>): TemplateState<E> {\n\t\tconst state = this._states[name];\n\n\t\tif (state) {\n\t\t\tstate.setAll(settings);\n\t\t\treturn state;\n\n\t\t} else {\n\t\t\tconst state = new TemplateState(name, this._template, settings);\n\t\t\tthis._states[name] = state;\n\t\t\tthis._template._stateChanged(name);\n\t\t\treturn state;\n\t\t}\n\t}\n\n\tpublic remove(name: string) {\n\t\tdelete this._states[name];\n\t\tthis._template._stateChanged(name);\n\t}\n\n\tpublic _apply(entity: E, state: ApplyState<E>): void {\n\t\t$object.each(this._states, (key, value) => {\n\t\t\tlet seen = state.states[key];\n\n\t\t\tif (seen == null) {\n\t\t\t\tseen = state.states[key] = {};\n\t\t\t}\n\n\t\t\tconst other = entity.states.create(key as string, {});\n\t\t\tvalue._apply(other, seen);\n\t\t});\n\t}\n}\n\n\nexport class TemplateAdapters<E extends Entity> {\n\tprivate _callbacks: { [K in keyof E[\"_settings\"]]?: Array<<O extends E>(value: O[\"_settings\"][K], target: O, key: K) => O[\"_settings\"][K]> } = {};\n\n\tpublic add<Key extends keyof E[\"_settings\"]>(key: Key, callback: (value: E[\"_settings\"][Key], target: E, key: Key) => E[\"_settings\"][Key]): IDisposer {\n\t\tlet callbacks = this._callbacks[key];\n\n\t\tif (callbacks === undefined) {\n\t\t\tcallbacks = this._callbacks[key] = [];\n\t\t}\n\n\t\tcallbacks.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(callbacks!, callback);\n\n\t\t\tif (callbacks!.length === 0) {\n\t\t\t\tdelete this._callbacks[key];\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic remove<Key extends keyof E[\"_settings\"]>(key: Key) {\n\t\tconst callbacks = this._callbacks[key];\n\n\t\tif (callbacks !== undefined) {\n\t\t\tdelete this._callbacks[key];\n\t\t}\n\t}\n\n\tpublic _apply(entity: E): IDisposer {\n\t\tconst disposers: Array<IDisposer> = [];\n\n\t\t$object.each(this._callbacks, (key, callbacks) => {\n\t\t\t$array.each(callbacks, (callback) => {\n\t\t\t\tdisposers.push(entity.adapters.add(key, callback));\n\t\t\t});\n\t\t});\n\n\t\treturn new MultiDisposer(disposers);\n\t}\n}\n\n\nexport interface ApplyState<E extends Entity> {\n\tsettings: Dirty<E[\"_settings\"]>;\n\tprivateSettings: Dirty<E[\"_privateSettings\"]>;\n\tstates: { [name: string]: Dirty<E[\"_settings\"]> };\n}\n\n\n// TODO maybe extend from Properties ?\nexport class Template<E extends Entity> implements IDisposer {\n\tprivate _disposed: boolean = false;\n\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\tpublic _privateSettings: E[\"_privateSettings\"] = {};\n\n\t// TODO code duplication with Properties\n\tpublic _settingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K]>(value: V) => void> } = {};\n\tpublic _privateSettingEvents: { [K in keyof this[\"_settings\"]]?: Array<<V extends this[\"_settings\"][K]>(value: V) => void> } = {};\n\n\tpublic _entities: Array<E> = [];\n\n\tpublic readonly states: TemplateStates<E> = new TemplateStates(this);\n\n\tpublic readonly adapters: TemplateAdapters<E> = new TemplateAdapters();\n\tpublic readonly events: EventDispatcher<Events<E, E[\"_events\"]>> = new EventDispatcher();\n\n\tpublic setup: (<O extends E>(entity: O) => void) | undefined;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tpublic static new<E extends Entity>(settings: E[\"_settings\"]): Template<E> {\n\t\treturn new Template<E>(settings, true);\n\t}\n\n\tprotected _dispose() {\n\t\tdisposeSettings(this._settings);\n\t\tdisposeSettings(this._privateSettings);\n\t}\n\n\t/**\n\t * Returns `true` if this element is disposed.\n\t *\n\t * @return Disposed\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n\n\tprivate _checkDisposed() {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"Template is disposed\");\n\t\t}\n\t}\n\n\t/**\n\t * Array of all entities using this template.\n\t */\n\tpublic get entities():Array<E>{\n\t\treturn this._entities;\n\t}\n\n\tconstructor(settings: E[\"_settings\"], isReal: boolean) {\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\n\t\tthis._settings = settings;\n\t}\n\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tthis._checkDisposed();\n\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\tpublic setRaw<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tthis._checkDisposed();\n\t\tthis._settings[key] = value;\n\t}\n\n\tpublic set<Key extends keyof this[\"_settings\"]>(key: Key, value: this[\"_settings\"][Key]) {\n\t\tthis._checkDisposed();\n\n\t\tif (this._settings[key] !== value) {\n\t\t\tthis.setRaw(key, value);\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._setTemplateProperty(this, key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key): void {\n\t\tthis._checkDisposed();\n\n\t\tif (key in this._settings) {\n\t\t\tdelete this._settings[key];\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._removeTemplateProperty(key);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic removeAll(): void {\n\t\tthis._checkDisposed();\n\n\t\t$object.each(this._settings, (key, _value) => {\n\t\t\tthis.remove(key);\n\t\t});\n\t}\n\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"], F>(key: Key, fallback: F): NonNullable<this[\"_privateSettings\"][Key]> | F;\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): this[\"_privateSettings\"][Key];\n\tpublic getPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, fallback?: any): any {\n\t\tthis._checkDisposed();\n\n\t\tconst value = this._privateSettings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\tpublic setPrivateRaw<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._checkDisposed();\n\t\tthis._privateSettings[key] = value;\n\t\treturn value;\n\t}\n\n\tpublic setPrivate<Key extends keyof this[\"_privateSettings\"], Value extends this[\"_privateSettings\"][Key]>(key: Key, value: Value): Value {\n\t\tthis._checkDisposed();\n\n\t\tif (this._privateSettings[key] !== value) {\n\t\t\tthis.setPrivateRaw(key, value);\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._setTemplatePrivateProperty(this, key, value);\n\t\t\t});\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tpublic removePrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key): void {\n\t\tthis._checkDisposed();\n\n\t\tif (key in this._privateSettings) {\n\t\t\tdelete this._privateSettings[key];\n\n\t\t\tthis._entities.forEach((entity) => {\n\t\t\t\tentity._removeTemplatePrivateProperty(key);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic setAll(value: this[\"_settings\"]) {\n\t\tthis._checkDisposed();\n\n\t\t$object.each(value, (key, value) => {\n\t\t\tthis.set(key, value);\n\t\t});\n\t}\n\n\t// TODO code duplication with Properties\n\tpublic on<Key extends keyof this[\"_settings\"]>(key: Key, callback: (value: this[\"_settings\"][Key], target?: E, key?: Key) => void): IDisposer {\n\t\tthis._checkDisposed();\n\n\t\tlet events = this._settingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._settingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._settingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t// TODO code duplication with Properties\n\tpublic onPrivate<Key extends keyof this[\"_privateSettings\"]>(key: Key, callback: (value: this[\"_privateSettings\"][Key], target?: E, key?: Key) => void): IDisposer {\n\t\tthis._checkDisposed();\n\n\t\tlet events = this._privateSettingEvents[key];\n\n\t\tif (events === undefined) {\n\t\t\tevents = this._privateSettingEvents[key] = [];\n\t\t}\n\n\t\tevents.push(callback);\n\n\t\treturn new Disposer(() => {\n\t\t\t$array.removeFirst(events!, callback);\n\n\t\t\tif (events!.length === 0) {\n\t\t\t\tdelete this._privateSettingEvents[key];\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic _apply(entity: E, state: ApplyState<E>): IDisposer {\n\t\tthis._checkDisposed();\n\n\t\tconst disposers: Array<IDisposer> = [];\n\n\t\t$object.each(this._settingEvents, (key, events) => {\n\t\t\t$array.each(events, (event) => {\n\t\t\t\tdisposers.push(entity.on(key, event));\n\t\t\t});\n\t\t});\n\n\t\t$object.each(this._privateSettingEvents, (key, events) => {\n\t\t\t$array.each(events, (event) => {\n\t\t\t\tdisposers.push(entity.onPrivate(key, event));\n\t\t\t});\n\t\t});\n\n\t\tthis.states._apply(entity, state);\n\n\t\tdisposers.push(this.adapters._apply(entity));\n\t\tdisposers.push(entity.events.copyFrom(this.events));\n\n\t\treturn new MultiDisposer(disposers);\n\t}\n\n\tpublic _setObjectTemplate(entity: E) {\n\t\tthis._checkDisposed();\n\t\tthis._entities.push(entity);\n\t}\n\n\tpublic _removeObjectTemplate(entity: E) {\n\t\t//this._checkDisposed();\n\t\t$array.remove(this._entities, entity);\n\t}\n\n\tpublic _stateChanged(name: string): void {\n\t\tthis._checkDisposed();\n\n\t\tthis._entities.forEach((entity) => {\n\t\t\tentity._applyStateByKey(name);\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
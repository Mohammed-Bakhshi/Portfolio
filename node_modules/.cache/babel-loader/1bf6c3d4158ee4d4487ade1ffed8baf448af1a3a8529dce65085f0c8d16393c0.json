{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moham\\\\Downloads\\\\Github projects\\\\Digital-Portfolio-main\\\\Frontend\\\\src\\\\GaugeChartComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GaugeChart from \"react-gauge-chart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomGauge = () => {\n  _s();\n  const [percent, setPercent] = useState(0); // Initial percentage is 0\n\n  useEffect(() => {\n    // Simulate the gauge filling up over time\n    const interval = setInterval(() => {\n      setPercent(prevPercent => {\n        if (prevPercent < 0.6) {\n          return Math.min(prevPercent + 0.01, 0.6); // Increment the percentage\n        } else {\n          clearInterval(interval); // Stop when the desired percentage is reached\n          return prevPercent;\n        }\n      });\n    }, 50); // Adjust the speed of the filling (in milliseconds)\n\n    return () => clearInterval(interval); // Cleanup interval when component unmounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(GaugeChart, {\n      id: \"gauge-chart-example\",\n      nrOfLevels: 100 // Number of levels or segments in the chart\n      ,\n      arcsLength: [0.6, 0.4] // Proportion of each segment\n      ,\n      colors: [\"#1E90FF\", \"#EAEAEA\"] // Colors of the segments\n      ,\n      percent: percent // Dynamic percentage value\n      ,\n      arcPadding: 0.02 // Padding between arcs\n      ,\n      textColor: \"#000\" // Text color\n      ,\n      style: {\n        width: \"300px\"\n      } // Chart width\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: \"10px\",\n        fontWeight: \"bold\"\n      },\n      children: \"# of Opportunities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomGauge, \"qy9k8hlTw0Z7eTBIkMCkGk+elf8=\");\n_c = CustomGauge;\nexport default CustomGauge;\nvar _c;\n$RefreshReg$(_c, \"CustomGauge\");","map":{"version":3,"names":["React","useState","useEffect","GaugeChart","jsxDEV","_jsxDEV","CustomGauge","_s","percent","setPercent","interval","setInterval","prevPercent","Math","min","clearInterval","style","textAlign","children","id","nrOfLevels","arcsLength","colors","arcPadding","textColor","width","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/Moham/Downloads/Github projects/Digital-Portfolio-main/Frontend/src/GaugeChartComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\n\r\nconst CustomGauge = () => {\r\n  const [percent, setPercent] = useState(0); // Initial percentage is 0\r\n\r\n  useEffect(() => {\r\n    // Simulate the gauge filling up over time\r\n    const interval = setInterval(() => {\r\n      setPercent((prevPercent) => {\r\n        if (prevPercent < 0.6) {\r\n          return Math.min(prevPercent + 0.01, 0.6); // Increment the percentage\r\n        } else {\r\n          clearInterval(interval); // Stop when the desired percentage is reached\r\n          return prevPercent;\r\n        }\r\n      });\r\n    }, 50); // Adjust the speed of the filling (in milliseconds)\r\n\r\n    return () => clearInterval(interval); // Cleanup interval when component unmounts\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      {/* Gauge Chart */}\r\n      <GaugeChart\r\n        id=\"gauge-chart-example\"\r\n        nrOfLevels={100} // Number of levels or segments in the chart\r\n        arcsLength={[0.6, 0.4]} // Proportion of each segment\r\n        colors={[\"#1E90FF\", \"#EAEAEA\"]} // Colors of the segments\r\n        percent={percent} // Dynamic percentage value\r\n        arcPadding={0.02} // Padding between arcs\r\n        textColor=\"#000\" // Text color\r\n        style={{ width: \"300px\" }} // Chart width\r\n      />\r\n      <p style={{ marginTop: \"10px\", fontWeight: \"bold\" }}># of Opportunities</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomGauge;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE3CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,UAAU,CAAEG,WAAW,IAAK;QAC1B,IAAIA,WAAW,GAAG,GAAG,EAAE;UACrB,OAAOC,IAAI,CAACC,GAAG,CAACF,WAAW,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QAC5C,CAAC,MAAM;UACLG,aAAa,CAACL,QAAQ,CAAC,CAAC,CAAC;UACzB,OAAOE,WAAW;QACpB;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAER,OAAO,MAAMG,aAAa,CAACL,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKW,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAElCb,OAAA,CAACF,UAAU;MACTgB,EAAE,EAAC,qBAAqB;MACxBC,UAAU,EAAE,GAAI,CAAC;MAAA;MACjBC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,CAAE,CAAC;MAAA;MACxBC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAE,CAAC;MAAA;MAChCd,OAAO,EAAEA,OAAQ,CAAC;MAAA;MAClBe,UAAU,EAAE,IAAK,CAAC;MAAA;MAClBC,SAAS,EAAC,MAAM,CAAC;MAAA;MACjBR,KAAK,EAAE;QAAES,KAAK,EAAE;MAAQ,CAAE,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC3B,eACFxB,OAAA;MAAGW,KAAK,EAAE;QAAEc,SAAS,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAb,QAAA,EAAC;IAAkB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACvE;AAEV,CAAC;AAACtB,EAAA,CAnCID,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
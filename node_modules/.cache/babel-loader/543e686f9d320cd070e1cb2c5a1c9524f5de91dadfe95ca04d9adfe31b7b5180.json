{"ast":null,"code":"import { Container } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent, percent } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * A clock hand for use with [[RadarChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/gauge-charts/#Clock_hands} for more info\r\n * @important\r\n */\nexport class ClockHand extends Container {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A \"hand\" element.\r\n     *\r\n     * @default Graphics.new()\r\n     */\n    Object.defineProperty(this, \"hand\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Graphics.new(this._root, {\n        themeTags: [\"hand\"]\n      }))\n    });\n    /**\r\n     * A \"pin\" element (hand's base).\r\n     *\r\n     * @default Graphics.new()\r\n     */\n    Object.defineProperty(this, \"pin\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Graphics.new(this._root, {\n        themeTags: [\"pin\"]\n      }))\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"clock\"]);\n    super._afterNew();\n    // to be redrawn when size changes\n    this.set(\"width\", percent(1));\n    this.adapters.add(\"x\", () => {\n      return 0;\n    });\n    this.adapters.add(\"y\", () => {\n      return 0;\n    });\n    this.pin.set(\"draw\", (display, graphics) => {\n      const parent = graphics.parent;\n      if (parent) {\n        const dataItem = parent.dataItem;\n        if (dataItem) {\n          const axis = dataItem.component;\n          if (axis) {\n            const chart = axis.chart;\n            if (chart) {\n              const cr = chart.getPrivate(\"radius\", 0);\n              let r = $utils.relativeToValue(parent.get(\"pinRadius\", 0), cr);\n              if (r < 0) {\n                r = cr + r;\n              }\n              display.moveTo(r, 0);\n              display.arc(0, 0, r, 0, 360);\n            }\n          }\n        }\n      }\n    });\n    this.hand.set(\"draw\", (display, graphics) => {\n      const parent = graphics.parent;\n      if (parent) {\n        let bullet = parent.parent;\n        // to be redrawn when size changes\n        if (bullet) {\n          bullet.set(\"width\", percent(1));\n        }\n        const dataItem = parent.dataItem;\n        if (dataItem) {\n          const axis = dataItem.component;\n          if (axis) {\n            const chart = axis.chart;\n            if (chart) {\n              const bw = parent.get(\"bottomWidth\", 10) / 2;\n              const tw = parent.get(\"topWidth\", 0) / 2;\n              const cr = chart.getPrivate(\"radius\", 0);\n              let r = $utils.relativeToValue(parent.get(\"radius\", 0), cr);\n              if (r < 0) {\n                r = cr + r;\n              }\n              let ir = parent.get(\"innerRadius\", 0);\n              if (ir instanceof Percent) {\n                ir = $utils.relativeToValue(ir, cr);\n              } else {\n                if (ir < 0) {\n                  if (ir < 0) {\n                    ir = r + ir;\n                  }\n                }\n              }\n              display.moveTo(ir, -bw);\n              display.lineTo(r, -tw);\n              display.lineTo(r, tw);\n              display.lineTo(ir, bw);\n              display.lineTo(ir, -bw);\n            }\n          }\n        }\n      }\n    });\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    this.hand._markDirtyKey(\"fill\");\n    this.pin._markDirtyKey(\"fill\");\n  }\n}\nObject.defineProperty(ClockHand, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"ClockHand\"\n});\nObject.defineProperty(ClockHand, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Container.classNames.concat([ClockHand.className])\n});","map":{"version":3,"names":["Container","Graphics","Percent","percent","$utils","ClockHand","constructor","Object","defineProperty","children","push","new","_root","themeTags","_afterNew","_settings","mergeTags","set","adapters","add","pin","display","graphics","parent","dataItem","axis","component","chart","cr","getPrivate","r","relativeToValue","get","moveTo","arc","hand","bullet","bw","tw","ir","lineTo","_prepareChildren","_markDirtyKey","classNames","concat","className"],"sources":["C:\\Users\\Moham\\Downloads\\Github projects\\Digital-Portfolio-main\\Frontend\\node_modules\\src\\.internal\\charts\\radar\\ClockHand.ts"],"sourcesContent":["import type { Axis } from \"../xy/axes/Axis\";\nimport type { AxisRendererCircular } from \"../radar/AxisRendererCircular\";\nimport type { RadarChart } from \"../radar/RadarChart\";\n\nimport { Container, IContainerPrivate, IContainerSettings } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent, percent } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IClockHandSettings extends IContainerSettings {\n\n\t/**\n\t * A width of the tip of the clock hand, in pixels.\n\t *\n\t * @default 1\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * A width of the base of the clock hand, in pixels.\n\t *\n\t * @default 10\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Radius of the hand, in pixels, or percent (relative to the axis radius).\n\t *\n\t * If set to negative number, will mean number of pixels inwards from the\n\t * axis.\n\t *\n\t * @default 90%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the hand, in pixels, or percent (relative to the axis\n\t * radius).\n\t *\n\t * If set to negative number, will mean number of pixels inwards from the\n\t * axis.\n\t *\n\t * @default 0\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Radius of the hand pin (circle at the base of the hand), in pixels, or in\n\t * percent (relative to the axis radius.)\n\t *\n\t * @default 10\n\t */\n\tpinRadius?: number | Percent;\n\n}\n\nexport interface IClockHandPrivate extends IContainerPrivate {\n}\n\n/**\n * A clock hand for use with [[RadarChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/gauge-charts/#Clock_hands} for more info\n * @important\n */\nexport class ClockHand extends Container {\n\n\tdeclare public _settings: IClockHandSettings;\n\tdeclare public _privateSettings: IClockHandPrivate;\n\n\tpublic static className: string = \"ClockHand\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([ClockHand.className]);\n\n\t/**\n\t * A \"hand\" element.\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly hand: Graphics = this.children.push(Graphics.new(this._root, { themeTags: [\"hand\"] }));\n\n\t/**\n\t * A \"pin\" element (hand's base).\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly pin: Graphics = this.children.push(Graphics.new(this._root, { themeTags: [\"pin\"] }));\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"clock\"]);\n\n\t\tsuper._afterNew();\n\n\t\t// to be redrawn when size changes\n\t\tthis.set(\"width\", percent(1));\n\n\t\tthis.adapters.add(\"x\", () => {\n\t\t\treturn 0\n\t\t})\n\n\t\tthis.adapters.add(\"y\", () => {\n\t\t\treturn 0\n\t\t})\n\n\t\tthis.pin.set(\"draw\", (display, graphics: Graphics) => {\n\t\t\tconst parent = graphics.parent as ClockHand;\n\t\t\tif (parent) {\n\t\t\t\tconst dataItem = parent.dataItem;\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst axis = dataItem.component as Axis<AxisRendererCircular>;\n\t\t\t\t\tif (axis) {\n\t\t\t\t\t\tconst chart = axis.chart as RadarChart;\n\t\t\t\t\t\tif (chart) {\n\t\t\t\t\t\t\tconst cr = chart.getPrivate(\"radius\", 0);\n\t\t\t\t\t\t\tlet r = $utils.relativeToValue(parent.get(\"pinRadius\", 0), cr);\n\t\t\t\t\t\t\tif(r < 0){\n\t\t\t\t\t\t\t\tr = cr + r;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdisplay.moveTo(r, 0)\n\t\t\t\t\t\t\tdisplay.arc(0, 0, r, 0, 360);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.hand.set(\"draw\", (display, graphics: Graphics) => {\n\t\t\tconst parent = graphics.parent as ClockHand;\n\n\t\t\tif (parent) {\n\n\t\t\t\tlet bullet = parent.parent;\n\t\t\t\t// to be redrawn when size changes\n\t\t\t\tif (bullet) {\n\t\t\t\t\tbullet.set(\"width\", percent(1));\n\t\t\t\t}\n\n\t\t\t\tconst dataItem = parent.dataItem;\n\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst axis = dataItem.component as Axis<AxisRendererCircular>;\n\t\t\t\t\tif (axis) {\n\t\t\t\t\t\tconst chart = axis.chart as RadarChart;\n\t\t\t\t\t\tif (chart) {\n\t\t\t\t\t\t\tconst bw = parent.get(\"bottomWidth\", 10) / 2;\n\t\t\t\t\t\t\tconst tw = parent.get(\"topWidth\", 0) / 2;\n\t\t\t\t\t\t\tconst cr = chart.getPrivate(\"radius\", 0);\n\t\t\t\t\t\t\tlet r = $utils.relativeToValue(parent.get(\"radius\", 0), cr);\n\n\t\t\t\t\t\t\tif(r < 0){\n\t\t\t\t\t\t\t\tr = cr + r;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet ir = parent.get(\"innerRadius\", 0);\n\n\t\t\t\t\t\t\tif (ir instanceof Percent) {\n\t\t\t\t\t\t\t\tir = $utils.relativeToValue(ir, cr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (ir < 0) {\n\t\t\t\t\t\t\t\t\tif (ir < 0) {\n\t\t\t\t\t\t\t\t\t\tir = r + ir;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplay.moveTo(ir, -bw);\n\t\t\t\t\t\t\tdisplay.lineTo(r, -tw);\n\t\t\t\t\t\t\tdisplay.lineTo(r, tw);\n\t\t\t\t\t\t\tdisplay.lineTo(ir, bw);\n\t\t\t\t\t\t\tdisplay.lineTo(ir, -bw);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis.hand._markDirtyKey(\"fill\");\n\t\tthis.pin._markDirtyKey(\"fill\");\n\t}\n}\n"],"mappings":"AAIA,SAASA,SAAS,QAA+C,6BAA6B;AAC9F,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,OAAO,EAAEC,OAAO,QAAQ,yBAAyB;AAE1D,OAAO,KAAKC,MAAM,MAAM,uBAAuB;AAqD/C;;;;;;AAMA,OAAM,MAAOC,SAAU,SAAQL,SAAS;EAAxCM,YAAA;;IAQC;;;;;IAKAC,MAAA,CAAAC,cAAA;;;;aAAiC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACT,QAAQ,CAACU,GAAG,CAAC,IAAI,CAACC,KAAK,EAAE;QAAEC,SAAS,EAAE,CAAC,MAAM;MAAC,CAAE,CAAC;;IAErG;;;;;IAKAN,MAAA,CAAAC,cAAA;;;;aAAgC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACT,QAAQ,CAACU,GAAG,CAAC,IAAI,CAACC,KAAK,EAAE;QAAEC,SAAS,EAAE,CAAC,KAAK;MAAC,CAAE,CAAC;;EAiGpG;EA/FWC,SAASA,CAAA;IAClB,IAAI,CAACC,SAAS,CAACF,SAAS,GAAGT,MAAM,CAACY,SAAS,CAAC,IAAI,CAACD,SAAS,CAACF,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAEhF,KAAK,CAACC,SAAS,EAAE;IAEjB;IACA,IAAI,CAACG,GAAG,CAAC,OAAO,EAAEd,OAAO,CAAC,CAAC,CAAC,CAAC;IAE7B,IAAI,CAACe,QAAQ,CAACC,GAAG,CAAC,GAAG,EAAE,MAAK;MAC3B,OAAO,CAAC;IACT,CAAC,CAAC;IAEF,IAAI,CAACD,QAAQ,CAACC,GAAG,CAAC,GAAG,EAAE,MAAK;MAC3B,OAAO,CAAC;IACT,CAAC,CAAC;IAEF,IAAI,CAACC,GAAG,CAACH,GAAG,CAAC,MAAM,EAAE,CAACI,OAAO,EAAEC,QAAkB,KAAI;MACpD,MAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAmB;MAC3C,IAAIA,MAAM,EAAE;QACX,MAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAQ;QAChC,IAAIA,QAAQ,EAAE;UACb,MAAMC,IAAI,GAAGD,QAAQ,CAACE,SAAuC;UAC7D,IAAID,IAAI,EAAE;YACT,MAAME,KAAK,GAAGF,IAAI,CAACE,KAAmB;YACtC,IAAIA,KAAK,EAAE;cACV,MAAMC,EAAE,GAAGD,KAAK,CAACE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;cACxC,IAAIC,CAAC,GAAG1B,MAAM,CAAC2B,eAAe,CAACR,MAAM,CAACS,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,EAAEJ,EAAE,CAAC;cAC9D,IAAGE,CAAC,GAAG,CAAC,EAAC;gBACRA,CAAC,GAAGF,EAAE,GAAGE,CAAC;;cAEXT,OAAO,CAACY,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;cACpBT,OAAO,CAACa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEJ,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;;;;;IAKjC,CAAC,CAAC;IAEF,IAAI,CAACK,IAAI,CAAClB,GAAG,CAAC,MAAM,EAAE,CAACI,OAAO,EAAEC,QAAkB,KAAI;MACrD,MAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAmB;MAE3C,IAAIA,MAAM,EAAE;QAEX,IAAIa,MAAM,GAAGb,MAAM,CAACA,MAAM;QAC1B;QACA,IAAIa,MAAM,EAAE;UACXA,MAAM,CAACnB,GAAG,CAAC,OAAO,EAAEd,OAAO,CAAC,CAAC,CAAC,CAAC;;QAGhC,MAAMqB,QAAQ,GAAGD,MAAM,CAACC,QAAQ;QAEhC,IAAIA,QAAQ,EAAE;UACb,MAAMC,IAAI,GAAGD,QAAQ,CAACE,SAAuC;UAC7D,IAAID,IAAI,EAAE;YACT,MAAME,KAAK,GAAGF,IAAI,CAACE,KAAmB;YACtC,IAAIA,KAAK,EAAE;cACV,MAAMU,EAAE,GAAGd,MAAM,CAACS,GAAG,CAAC,aAAa,EAAE,EAAE,CAAC,GAAG,CAAC;cAC5C,MAAMM,EAAE,GAAGf,MAAM,CAACS,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC;cACxC,MAAMJ,EAAE,GAAGD,KAAK,CAACE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;cACxC,IAAIC,CAAC,GAAG1B,MAAM,CAAC2B,eAAe,CAACR,MAAM,CAACS,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAEJ,EAAE,CAAC;cAE3D,IAAGE,CAAC,GAAG,CAAC,EAAC;gBACRA,CAAC,GAAGF,EAAE,GAAGE,CAAC;;cAGX,IAAIS,EAAE,GAAGhB,MAAM,CAACS,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;cAErC,IAAIO,EAAE,YAAYrC,OAAO,EAAE;gBAC1BqC,EAAE,GAAGnC,MAAM,CAAC2B,eAAe,CAACQ,EAAE,EAAEX,EAAE,CAAC;eACnC,MACI;gBACJ,IAAIW,EAAE,GAAG,CAAC,EAAE;kBACX,IAAIA,EAAE,GAAG,CAAC,EAAE;oBACXA,EAAE,GAAGT,CAAC,GAAGS,EAAE;;;;cAKdlB,OAAO,CAACY,MAAM,CAACM,EAAE,EAAE,CAACF,EAAE,CAAC;cACvBhB,OAAO,CAACmB,MAAM,CAACV,CAAC,EAAE,CAACQ,EAAE,CAAC;cACtBjB,OAAO,CAACmB,MAAM,CAACV,CAAC,EAAEQ,EAAE,CAAC;cACrBjB,OAAO,CAACmB,MAAM,CAACD,EAAE,EAAEF,EAAE,CAAC;cACtBhB,OAAO,CAACmB,MAAM,CAACD,EAAE,EAAE,CAACF,EAAE,CAAC;;;;;IAK5B,CAAC,CAAC;EACH;EAEOI,gBAAgBA,CAAA;IACtB,KAAK,CAACA,gBAAgB,EAAE;IACxB,IAAI,CAACN,IAAI,CAACO,aAAa,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACtB,GAAG,CAACsB,aAAa,CAAC,MAAM,CAAC;EAC/B;;AA/GAnC,MAAA,CAAAC,cAAA,CAAAH,SAAA;;;;SAAkC;;AAClCE,MAAA,CAAAC,cAAA,CAAAH,SAAA;;;;SAA0CL,SAAS,CAAC2C,UAAU,CAACC,MAAM,CAAC,CAACvC,SAAS,CAACwC,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
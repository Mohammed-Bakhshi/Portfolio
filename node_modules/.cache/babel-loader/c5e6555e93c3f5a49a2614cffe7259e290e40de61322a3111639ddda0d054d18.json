{"ast":null,"code":"import { Label } from \"./Label\";\nimport { Container } from \"./Container\";\nimport { RoundedRectangle } from \"./RoundedRectangle\";\nimport { Percent } from \"../util/Percent\";\nimport { color } from \"../util/Color\";\nimport * as $utils from \"../util/Utils\";\nimport * as $type from \"../util/Type\";\nimport * as $array from \"../util/Array\";\n/**\r\n * Editable label.\r\n *\r\n * @since 5.9.5\r\n */\nexport class EditableLabel extends Label {\n  _afterNew() {\n    super._afterNew();\n    const input = this.children.push(Container.new(this._root, {\n      html: \"<textarea class=\\\"am5-editable-label\\\"></textarea>\",\n      isMeasured: false\n    }));\n    input.hide();\n    const editOn = this.get(\"editOn\", \"click\");\n    if (editOn != \"none\") {\n      input.events.on(editOn, _ev => {\n        // this is here just to make it interactive\n      });\n      this.events.on(editOn, _ev => {\n        this.set(\"active\", true);\n      });\n    }\n    this.setPrivate(\"input\", input);\n    // Set background\n    let background = this.get(\"background\");\n    if (!background) {\n      background = this.set(\"background\", RoundedRectangle.new(this._root, {\n        themeTags: [\"editablelabel\", \"background\"]\n      }));\n    } else {\n      background.set(\"themeTags\", [\"editablelabel\", \"background\"]);\n    }\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    this._maybeInitTextarea();\n  }\n  _updateChildren() {\n    super._updateChildren();\n    if (this.isDirty(\"active\")) {\n      const editing = this.get(\"active\", false);\n      if (editing) {\n        this._startEditing();\n      } else {\n        this._stopEditing();\n      }\n      const bg = this.get(\"background\");\n      if (bg) {\n        bg.set(\"active\", editing);\n      }\n    }\n    ;\n    this._syncText();\n    this._syncStyle();\n  }\n  _maybeInitTextarea() {\n    if (!this._isInited()) {\n      const input = this.getPrivate(\"input\");\n      if (input && input.getPrivate(\"htmlElement\")) {\n        const el = input.getPrivate(\"htmlElement\");\n        const textarea = el.querySelector(\".am5-editable-label\");\n        if (textarea) {\n          this.setPrivate(\"textarea\", textarea);\n          // Resize textarea on keypress\n          textarea.addEventListener(\"input\", _ev => {\n            if (this.get(\"multiLine\") === false) {\n              // replace line breaks with spaces for single-line labels\n              textarea.value = textarea.value.replace(/\\n/g, \" \");\n            }\n            this.set(\"text\", textarea.value);\n            this._syncStyle();\n          });\n          // Finish editing on blur\n          textarea.addEventListener(\"blur\", _ev => this.set(\"active\", false));\n          // Finish editing on ESC press\n          if ($utils.supports(\"keyboardevents\")) {\n            this._disposers.push($utils.addEventListener(document, \"keydown\", ev => {\n              if ($utils.getEventKey(ev) == \"Escape\") {\n                this.set(\"active\", false);\n              }\n            }));\n          }\n          // Intercept ENTER if necessary\n          this._disposers.push($utils.addEventListener(document, \"keydown\", ev => {\n            if ($utils.getEventKey(ev) == \"Enter\" && this.get(\"multiLine\") === false) {\n              // Single-line label, save instead of breaking into new line\n              ev.preventDefault();\n              this.set(\"active\", false);\n            }\n          }));\n          this.events.dispatch(\"inited\", {\n            type: \"inited\",\n            target: this\n          });\n        }\n      }\n    }\n  }\n  _isInited() {\n    return this.getPrivate(\"textarea\") ? true : false;\n  }\n  _startEditing() {\n    if (!this._isInited()) {\n      this.events.once(\"inited\", () => {\n        this._startEditing();\n      });\n      return;\n    }\n    this._text.set(\"opacity\", 0);\n    const input = this.getPrivate(\"input\");\n    const textarea = this.getPrivate(\"textarea\");\n    if (textarea) {\n      if (this.get(\"text\", \"\") == \"\") {\n        this.set(\"text\", \" \");\n      }\n      input.show(0);\n      this.setTimeout(() => {\n        // size textarea to fit its actual content\n        this._syncStyle();\n        textarea.focus();\n      }, 100);\n    }\n  }\n  _stopEditing() {\n    if (!this._isInited()) {\n      this.events.once(\"inited\", () => {\n        this._stopEditing();\n      });\n      return;\n    }\n    const input = this.getPrivate(\"input\");\n    const textarea = this.getPrivate(\"textarea\");\n    if (textarea) {\n      this.set(\"text\", textarea.value);\n      input.hide(0);\n      this._text.set(\"opacity\", 1);\n    }\n  }\n  _syncStyle() {\n    const input = this.getPrivate(\"input\");\n    const textarea = this.getPrivate(\"textarea\");\n    if (textarea) {\n      // Set up HTML\n      const el = input.getPrivate(\"htmlElement\");\n      // Reset all styles\n      const computedStyles = window.getComputedStyle(textarea);\n      $array.each(computedStyles, style => {\n        textarea.style[style] = \"initial\";\n      });\n      // Remove textarea attributes\n      textarea.style.color = this.get(\"fill\", color(0x000000)).toCSS(this.get(\"fillOpacity\", 1));\n      textarea.style.backgroundColor = \"rgba(0, 0, 0, 0)\";\n      textarea.style.border = \"none\";\n      textarea.style.outline = \"none\";\n      textarea.style.padding = \"0\";\n      // Wrapping\n      textarea.wrap = \"off\";\n      textarea.style.resize = \"none\";\n      // Place carret under mouse cursor\n      // @todo\n      // Size\n      textarea.style.overflow = \"hidden\";\n      const maxWidth = this.get(\"maxWidth\", 0) - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0);\n      if (maxWidth > 0) {\n        textarea.style.maxWidth = maxWidth + \"px\";\n      } else {\n        // The actual minWidth will be set on frameend\n        textarea.style.minWidth = \"\";\n      }\n      textarea.style.height = \"auto\";\n      textarea.style.minHeight = textarea.scrollHeight + \"px\";\n      // If width is explicitly set on a label, use it for textarea\n      if (this.get(\"width\")) {\n        textarea.style.width = this.width() - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0) + \"px\";\n        textarea.style.minWidth = \"\";\n      }\n      // Line height\n      const lineHeight = this.get(\"lineHeight\");\n      if (!lineHeight) {\n        textarea.style.lineHeight = \"1.2\";\n      } else if (lineHeight instanceof Percent) {\n        textarea.style.lineHeight = lineHeight.value + \"\";\n      } else if ($type.isNumber(lineHeight)) {\n        textarea.style.lineHeight = lineHeight + \"\";\n      }\n      // Font stuff\n      let fontFamily = this.get(\"fontFamily\");\n      if (!fontFamily) {\n        fontFamily = getComputedStyle(input.getPrivate(\"htmlElement\"), \"font-family\").getPropertyValue(\"font-family\");\n      }\n      textarea.style.fontFamily = fontFamily;\n      let fontSize = this.get(\"fontSize\");\n      if (!fontSize) {\n        fontSize = getComputedStyle(input.getPrivate(\"htmlElement\"), \"font-size\").getPropertyValue(\"font-size\");\n      } else if ($type.isNumber(fontSize)) {\n        fontSize = fontSize + \"px\";\n      } else {\n        fontSize = fontSize;\n      }\n      textarea.style.fontSize = fontSize;\n      let fontWeight = this.get(\"fontWeight\");\n      if (!fontWeight) {\n        fontWeight = getComputedStyle(input.getPrivate(\"htmlElement\"), \"font-weight\").getPropertyValue(\"font-weight\");\n      } else {\n        fontWeight = fontWeight;\n      }\n      textarea.style.fontWeight = fontWeight;\n      let fontStyle = this.get(\"fontStyle\");\n      if (!fontStyle) {\n        fontStyle = getComputedStyle(input.getPrivate(\"htmlElement\"), \"font-style\").getPropertyValue(\"font-style\");\n      } else {\n        fontStyle = fontStyle;\n      }\n      textarea.style.fontStyle = fontStyle;\n      const oversizeBehavior = this.get(\"oversizedBehavior\");\n      if (oversizeBehavior == \"wrap\") {\n        textarea.style.whiteSpace = \"pre-wrap\";\n      } else {\n        textarea.style.whiteSpace = \"nowrap\";\n      }\n      // Adjust textarea postion based on textAlign setting\n      this._root.events.on(\"frameended\", () => {\n        if (textarea.style.minWidth == \"\") {\n          textarea.style.minWidth = textarea.scrollWidth + 20 + \"px\";\n        }\n        const textAlign = this.get(\"textAlign\", \"start\");\n        if (textAlign == \"center\") {\n          textarea.style.textAlign = \"center\";\n          if (!el.style.transform.match(/translateX/) && !this.get(\"width\")) {\n            el.style.transform += \" translateX(-50%)\";\n          }\n        } else if (textAlign == \"end\") {\n          textarea.style.textAlign = \"right\";\n          if (!el.style.transform.match(/translateX/) && !this.get(\"width\")) {\n            el.style.transform += \" translateX(-100%)\";\n          }\n        } else {\n          textarea.style.textAlign = textAlign;\n        }\n      });\n    }\n  }\n  _syncText() {\n    const textarea = this.getPrivate(\"textarea\");\n    let text = this.get(\"text\", \"\");\n    if (text == \" \") {\n      text = \"\";\n    }\n    if (textarea) {\n      textarea.value = text;\n    }\n  }\n}\nObject.defineProperty(EditableLabel, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"EditableLabel\"\n});\nObject.defineProperty(EditableLabel, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Label.classNames.concat([EditableLabel.className])\n});","map":{"version":3,"names":["Label","Container","RoundedRectangle","Percent","color","$utils","$type","$array","EditableLabel","_afterNew","input","children","push","new","_root","html","isMeasured","hide","editOn","get","events","on","_ev","set","setPrivate","background","themeTags","_prepareChildren","_maybeInitTextarea","_updateChildren","isDirty","editing","_startEditing","_stopEditing","bg","_syncText","_syncStyle","_isInited","getPrivate","el","textarea","querySelector","addEventListener","value","replace","supports","_disposers","document","ev","getEventKey","preventDefault","dispatch","type","target","once","_text","show","setTimeout","focus","computedStyles","window","getComputedStyle","each","style","toCSS","backgroundColor","border","outline","padding","wrap","resize","overflow","maxWidth","minWidth","height","minHeight","scrollHeight","width","lineHeight","isNumber","fontFamily","getPropertyValue","fontSize","fontWeight","fontStyle","oversizeBehavior","whiteSpace","scrollWidth","textAlign","transform","match","text","Object","defineProperty","classNames","concat","className"],"sources":["C:\\Users\\Moham\\Downloads\\Github projects\\Digital-Portfolio-main\\Frontend\\node_modules\\src\\.internal\\core\\render\\EditableLabel.ts"],"sourcesContent":["import { Label, ILabelPrivate, ILabelSettings, ILabelEvents } from \"./Label\";\nimport { Container } from \"./Container\";\nimport { RoundedRectangle } from \"./RoundedRectangle\";\nimport { Percent } from \"../util/Percent\"\nimport { color } from \"../util/Color\";\n\n\nimport * as $utils from \"../util/Utils\"\nimport * as $type from \"../util/Type\"\nimport * as $array from \"../util/Array\"\n\nexport interface IEditableLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Start editing on click (`\"click\"`; default) or double-click ('\"dblclick\"').\n\t *\n\t * All available options:\n\t *\n\t * *`\"click\"` (default)\n\t * *`\"dblclick\"`\n\t * *`\"rightclick\"`\n\t * *`\"middleclick\"`\n\t * *`\"none\"`\n\t *\n\t * @default \"click\"\n\t */\n\teditOn?: \"click\" | \"dblclick\" | \"rightclick\" | \"middleclick\" | \"none\";\n\n\t/**\n\t * Allow multiple lines (`true` - dfault) or no (`false`).\n\t *\n\t * @default true\n\t * @since 5.9.6\n\t */\n\tmultiLine?: boolean;\n\n}\n\nexport interface IEditableLabelPrivate extends ILabelPrivate {\n\tinput: Container;\n\ttextarea: HTMLTextAreaElement;\n}\n\nexport interface IEditableLabelEvents extends ILabelEvents {\n\tinited: {};\n}\n\n/**\n * Editable label.\n *\n * @since 5.9.5\n */\nexport class EditableLabel extends Label {\n\n\tdeclare public _settings: IEditableLabelSettings;\n\tdeclare public _privateSettings: IEditableLabelPrivate;\n\tdeclare public _events: IEditableLabelEvents;\n\n\tpublic static className: string = \"EditableLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([EditableLabel.className]);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tconst input = this.children.push(Container.new(this._root, {\n\t\t\thtml: \"<textarea class=\\\"am5-editable-label\\\"></textarea>\",\n\t\t\tisMeasured: false\n\t\t}));\n\n\t\tinput.hide();\n\n\t\tconst editOn: any = this.get(\"editOn\", \"click\");\n\n\t\tif (editOn != \"none\") {\n\t\t\tinput.events.on(editOn, (_ev) => {\n\t\t\t\t// this is here just to make it interactive\n\t\t\t});\n\n\t\t\tthis.events.on(editOn, (_ev) => {\n\t\t\t\tthis.set(\"active\", true);\n\t\t\t});\n\t\t}\n\n\t\tthis.setPrivate(\"input\", input);\n\n\t\t// Set background\n\t\tlet background = this.get(\"background\");\n\n\t\tif (!background) {\n\t\t\tbackground = this.set(\"background\", RoundedRectangle.new(this._root, {\n\t\t\t\tthemeTags: [\"editablelabel\", \"background\"]\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tbackground.set(\"themeTags\", [\"editablelabel\", \"background\"]);\n\t\t}\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._maybeInitTextarea();\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"active\")) {\n\n\t\t\tconst editing = this.get(\"active\", false);\n\t\t\tif (editing) {\n\t\t\t\tthis._startEditing();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._stopEditing();\n\t\t\t}\n\n\t\t\tconst bg = this.get(\"background\");\n\t\t\tif (bg) {\n\t\t\t\tbg.set(\"active\", editing);\n\t\t\t}\n\t\t};\n\n\t\tthis._syncText();\n\t\tthis._syncStyle();\n\t}\n\n\tprotected _maybeInitTextarea() {\n\t\tif (!this._isInited()) {\n\t\t\tconst input = this.getPrivate(\"input\");\n\t\t\tif (input && input.getPrivate(\"htmlElement\")) {\n\t\t\t\tconst el = input.getPrivate(\"htmlElement\")!;\n\t\t\t\tconst textarea = el.querySelector(\".am5-editable-label\") as HTMLTextAreaElement;\n\t\t\t\tif (textarea) {\n\t\t\t\t\tthis.setPrivate(\"textarea\", textarea as HTMLTextAreaElement);\n\n\t\t\t\t\t// Resize textarea on keypress\n\t\t\t\t\ttextarea.addEventListener(\"input\", _ev => {\n\t\t\t\t\t\tif (this.get(\"multiLine\") === false) {\n\t\t\t\t\t\t\t// replace line breaks with spaces for single-line labels\n\t\t\t\t\t\t\ttextarea.value = textarea.value.replace(/\\n/g, \" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.set(\"text\", textarea.value);\n\t\t\t\t\t\tthis._syncStyle();\n\t\t\t\t\t});\n\n\t\t\t\t\t// Finish editing on blur\n\t\t\t\t\ttextarea.addEventListener(\"blur\", _ev => this.set(\"active\", false));\n\n\t\t\t\t\t// Finish editing on ESC press\n\t\t\t\t\tif ($utils.supports(\"keyboardevents\")) {\n\t\t\t\t\t\tthis._disposers.push($utils.addEventListener(document, \"keydown\", (ev: KeyboardEvent) => {\n\t\t\t\t\t\t\tif ($utils.getEventKey(ev) == \"Escape\") {\n\t\t\t\t\t\t\t\tthis.set(\"active\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Intercept ENTER if necessary\n\t\t\t\t\tthis._disposers.push($utils.addEventListener(document, \"keydown\", (ev: KeyboardEvent) => {\n\t\t\t\t\t\tif ($utils.getEventKey(ev) == \"Enter\" && this.get(\"multiLine\") === false) {\n\t\t\t\t\t\t\t// Single-line label, save instead of breaking into new line\n\t\t\t\t\t\t\tev.preventDefault();\n\t\t\t\t\t\t\tthis.set(\"active\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\n\t\t\t\t\tthis.events.dispatch(\"inited\", {\n\t\t\t\t\t\ttype: \"inited\",\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _isInited(): boolean {\n\t\treturn this.getPrivate(\"textarea\") ? true : false;\n\t}\n\n\tprotected _startEditing() {\n\t\tif (!this._isInited()) {\n\t\t\tthis.events.once(\"inited\", () => {\n\t\t\t\tthis._startEditing();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis._text.set(\"opacity\", 0);\n\t\tconst input = this.getPrivate(\"input\");\n\t\tconst textarea = this.getPrivate(\"textarea\");\n\t\tif (textarea) {\n\t\t\tif (this.get(\"text\", \"\") == \"\") {\n\t\t\t\tthis.set(\"text\", \" \");\n\t\t\t}\n\t\t\tinput.show(0);\n\t\t\tthis.setTimeout(() => {\n\t\t\t\t// size textarea to fit its actual content\n\t\t\t\tthis._syncStyle();\n\t\t\t\ttextarea.focus();\n\t\t\t}, 100);\n\t\t}\n\t}\n\n\tprotected _stopEditing() {\n\t\tif (!this._isInited()) {\n\t\t\tthis.events.once(\"inited\", () => {\n\t\t\t\tthis._stopEditing();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst input = this.getPrivate(\"input\");\n\t\tconst textarea = this.getPrivate(\"textarea\");\n\t\tif (textarea) {\n\t\t\tthis.set(\"text\", textarea.value);\n\t\t\tinput.hide(0);\n\t\t\tthis._text.set(\"opacity\", 1);\n\t\t}\n\t}\n\n\tprotected _syncStyle() {\n\t\tconst input = this.getPrivate(\"input\");\n\t\tconst textarea = this.getPrivate(\"textarea\");\n\t\tif (textarea) {\n\t\t\t// Set up HTML\n\t\t\tconst el = input.getPrivate(\"htmlElement\")!;\n\n\t\t\t// Reset all styles\n\t\t\tconst computedStyles = window.getComputedStyle(textarea);\n\t\t\t$array.each(computedStyles, (style: any) => {\n\t\t\t\ttextarea.style[style] = \"initial\";\n\t\t\t});\n\n\t\t\t// Remove textarea attributes\n\t\t\ttextarea.style.color = this.get(\"fill\", color(0x000000)).toCSS(this.get(\"fillOpacity\", 1));\n\t\t\ttextarea.style.backgroundColor = \"rgba(0, 0, 0, 0)\";\n\t\t\ttextarea.style.border = \"none\";\n\t\t\ttextarea.style.outline = \"none\";\n\t\t\ttextarea.style.padding = \"0\";\n\n\t\t\t// Wrapping\n\t\t\ttextarea.wrap = \"off\";\n\t\t\ttextarea.style.resize = \"none\";\n\n\t\t\t// Place carret under mouse cursor\n\t\t\t// @todo\n\n\t\t\t// Size\n\t\t\ttextarea.style.overflow = \"hidden\";\n\t\t\tconst maxWidth = this.get(\"maxWidth\", 0) - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0);\n\t\t\tif (maxWidth > 0) {\n\t\t\t\ttextarea.style.maxWidth = maxWidth + \"px\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// The actual minWidth will be set on frameend\n\t\t\t\ttextarea.style.minWidth = \"\";\n\t\t\t}\n\n\t\t\ttextarea.style.height = \"auto\";\n\t\t\ttextarea.style.minHeight = textarea.scrollHeight + \"px\";\n\n\t\t\t// If width is explicitly set on a label, use it for textarea\n\t\t\tif (this.get(\"width\")) {\n\t\t\t\ttextarea.style.width = (this.width()  - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0)) + \"px\";\n\t\t\t\ttextarea.style.minWidth = \"\";\n\t\t\t}\n\n\t\t\t// Line height\n\t\t\tconst lineHeight = this.get(\"lineHeight\");\n\t\t\tif (!lineHeight) {\n\t\t\t\ttextarea.style.lineHeight = \"1.2\";\n\t\t\t}\n\t\t\telse if (lineHeight instanceof Percent) {\n\t\t\t\ttextarea.style.lineHeight = lineHeight.value + \"\";\n\t\t\t}\n\t\t\telse if ($type.isNumber(lineHeight)) {\n\t\t\t\ttextarea.style.lineHeight = lineHeight + \"\";\n\t\t\t}\n\n\t\t\t// Font stuff\n\t\t\tlet fontFamily: any = this.get(\"fontFamily\");\n\t\t\tif (!fontFamily) {\n\t\t\t\tfontFamily = getComputedStyle(input.getPrivate(\"htmlElement\")!, \"font-family\").getPropertyValue(\"font-family\");\n\t\t\t}\n\t\t\ttextarea.style.fontFamily = fontFamily;\n\n\t\t\tlet fontSize: any = this.get(\"fontSize\");\n\t\t\tif (!fontSize) {\n\t\t\t\tfontSize = getComputedStyle(input.getPrivate(\"htmlElement\")!, \"font-size\").getPropertyValue(\"font-size\");\n\t\t\t}\n\t\t\telse if ($type.isNumber(fontSize)) {\n\t\t\t\tfontSize = fontSize + \"px\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfontSize = fontSize;\n\t\t\t}\n\t\t\ttextarea.style.fontSize = fontSize;\n\n\t\t\tlet fontWeight: any = this.get(\"fontWeight\");\n\t\t\tif (!fontWeight) {\n\t\t\t\tfontWeight = getComputedStyle(input.getPrivate(\"htmlElement\")!, \"font-weight\").getPropertyValue(\"font-weight\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfontWeight = fontWeight;\n\t\t\t}\n\t\t\ttextarea.style.fontWeight = fontWeight;\n\n\t\t\tlet fontStyle: any = this.get(\"fontStyle\");\n\t\t\tif (!fontStyle) {\n\t\t\t\tfontStyle = getComputedStyle(input.getPrivate(\"htmlElement\")!, \"font-style\").getPropertyValue(\"font-style\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfontStyle = fontStyle;\n\t\t\t}\n\t\t\ttextarea.style.fontStyle = fontStyle;\n\n\t\t\tconst oversizeBehavior = this.get(\"oversizedBehavior\");\n\t\t\tif (oversizeBehavior == \"wrap\") {\n\t\t\t\ttextarea.style.whiteSpace = \"pre-wrap\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttextarea.style.whiteSpace = \"nowrap\";\n\t\t\t}\n\n\t\t\t// Adjust textarea postion based on textAlign setting\n\t\t\tthis._root.events.on(\"frameended\", () => {\n\n\t\t\t\tif (textarea.style.minWidth == \"\") {\n\t\t\t\t\ttextarea.style.minWidth = (textarea.scrollWidth + 20) + \"px\";\n\t\t\t\t}\n\n\t\t\t\tconst textAlign = this.get(\"textAlign\", \"start\");\n\t\t\t\tif (textAlign == \"center\") {\n\t\t\t\t\ttextarea.style.textAlign = \"center\";\n\t\t\t\t\tif (!el.style.transform.match(/translateX/) && !this.get(\"width\")) {\n\t\t\t\t\t\tel.style.transform += \" translateX(-50%)\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (textAlign == \"end\") {\n\t\t\t\t\ttextarea.style.textAlign = \"right\";\n\t\t\t\t\tif (!el.style.transform.match(/translateX/) && !this.get(\"width\")) {\n\t\t\t\t\t\tel.style.transform += \" translateX(-100%)\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttextarea.style.textAlign = textAlign;\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\t}\n\n\tprotected _syncText() {\n\t\tconst textarea = this.getPrivate(\"textarea\");\n\t\tlet text = this.get(\"text\", \"\");\n\t\tif (text == \" \") {\n\t\t\ttext = \"\";\n\t\t}\n\t\tif (textarea) {\n\t\t\ttextarea.value = text;\n\t\t}\n\t}\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
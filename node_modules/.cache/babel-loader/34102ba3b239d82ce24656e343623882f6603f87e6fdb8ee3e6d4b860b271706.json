{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n/**\r\n * Returns a `Promise` which can be used to execute code after number of\r\n * milliseconds.\r\n *\r\n * @param   ms  Sleep duration in ms\r\n * @return      Promise\r\n */\nexport function sleep(ms) {\n  return new Promise((resolve, _reject) => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport let timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 365.242 / 12 * 86400000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n    case \"month\":\n      return \"year\";\n    case \"week\":\n      return \"month\";\n    case \"day\":\n      return \"month\";\n    // not a mistake\n    case \"hour\":\n      return \"day\";\n    case \"minute\":\n      return \"hour\";\n    case \"second\":\n      return \"minute\";\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\nexport function getDuration(unit, count) {\n  if (count == null) {\n    count = 1;\n  }\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * @ignore\r\n */\nexport function getIntervalDuration(interval) {\n  if (interval) {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  }\n  return 0;\n}\nexport function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {\n  const unit = interval.timeUnit;\n  const count = interval.count;\n  if (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  } else {\n    const firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n    let lastTime = firstTime + count * getDuration(unit) * 1.05;\n    lastTime = round(new Date(lastTime), unit, 1, firstDateOfWeek, utc, undefined, timezone).getTime();\n    return lastTime - firstTime;\n  }\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @param date  Source date\r\n * @return Copy\r\n */\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @param timeOne  timestamp\r\n * @param timeTwo  timestamp\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\nexport function checkChange(timeOne, timeTwo, unit, utc, timezone) {\n  // quick\n  if (timeTwo - timeOne > getDuration(unit, 1.2)) {\n    return true;\n  }\n  let dateOne = new Date(timeOne);\n  let dateTwo = new Date(timeTwo);\n  if (timezone) {\n    dateOne = timezone.convertLocal(dateOne);\n    dateTwo = timezone.convertLocal(dateTwo);\n  }\n  let timeZoneOffset1 = 0;\n  let timeZoneOffset2 = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n  let changed = false;\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n      break;\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n      break;\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n      break;\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n      break;\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n      break;\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n      break;\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n      break;\n  }\n  if (changed) {\n    return changed;\n  }\n  let nextUnit = getNextUnit(unit);\n  if (nextUnit) {\n    return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\nexport function add(date, unit, count, utc, timezone) {\n  let timeZoneOffset = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    if (timezone) {\n      timeZoneOffset -= timezone.offsetUTC(date);\n    }\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      let day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n    case \"second\":\n      let seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n    case \"millisecond\":\n      let milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n    case \"hour\":\n      let hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n    case \"minute\":\n      let minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n    case \"year\":\n      let year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n    case \"month\":\n      const endDays = date.getUTCDate();\n      const startDays = new Date(date.getUTCFullYear(), date.getUTCMonth(), 0).getUTCDate();\n      let month = date.getUTCMonth();\n      if (endDays > startDays) {\n        date.setUTCMonth(month + count, startDays);\n      } else {\n        date.setUTCMonth(month + count);\n      }\n      break;\n    case \"week\":\n      let wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      let newTimeZoneOffset = date.getTimezoneOffset();\n      if (timezone) {\n        newTimeZoneOffset += timezone.offsetUTC(date);\n      }\n      if (newTimeZoneOffset != timeZoneOffset) {\n        let diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n        // solves issues if new time falls back to old time zone\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * @ignore\r\n */\nexport function roun(time, unit, count, root, firstTime) {\n  let firstDate;\n  if (firstTime != null) {\n    firstDate = new Date(firstTime);\n  }\n  return round(new Date(time), unit, count, root.locale.firstDayOfWeek, root.utc, firstDate, root.timezone).getTime();\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param utc              Use UTC timezone\r\n * @param firstDate        First date to round to\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {\n  if (!timezone || utc) {\n    let timeZoneOffset = 0;\n    if (!utc && unit != \"millisecond\") {\n      timeZoneOffset = date.getTimezoneOffset();\n      date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n    }\n    switch (unit) {\n      case \"day\":\n        let day = date.getUTCDate();\n        if (count > 1) {\n          //\tday = Math.floor(day / count) * count;\n          if (firstDate) {\n            firstDate = round(firstDate, \"day\", 1);\n            let difference = date.getTime() - firstDate.getTime();\n            let unitCount = Math.floor(difference / getDuration(\"day\") / count);\n            let duration = getDuration(\"day\", unitCount * count);\n            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          }\n        } else {\n          date.setUTCDate(day);\n        }\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n      case \"second\":\n        let seconds = date.getUTCSeconds();\n        if (count > 1) {\n          seconds = Math.floor(seconds / count) * count;\n        }\n        date.setUTCSeconds(seconds, 0);\n        break;\n      case \"millisecond\":\n        if (count == 1) {\n          return date; // much better for perf!\n        }\n\n        let milliseconds = date.getUTCMilliseconds();\n        milliseconds = Math.floor(milliseconds / count) * count;\n        date.setUTCMilliseconds(milliseconds);\n        break;\n      case \"hour\":\n        let hours = date.getUTCHours();\n        if (count > 1) {\n          hours = Math.floor(hours / count) * count;\n        }\n        date.setUTCHours(hours, 0, 0, 0);\n        break;\n      case \"minute\":\n        let minutes = date.getUTCMinutes();\n        if (count > 1) {\n          minutes = Math.floor(minutes / count) * count;\n        }\n        date.setUTCMinutes(minutes, 0, 0);\n        break;\n      case \"month\":\n        let month = date.getUTCMonth();\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n        date.setUTCMonth(month, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n      case \"year\":\n        let year = date.getUTCFullYear();\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n        date.setUTCFullYear(year, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n      case \"week\":\n        if (count > 1) {\n          if (firstDate) {\n            firstDate = round(firstDate, \"week\", 1);\n            let difference = date.getTime() - firstDate.getTime();\n            let unitCount = Math.floor(difference / getDuration(\"week\") / count);\n            let duration = getDuration(\"week\", unitCount * count);\n            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          }\n        }\n        let wday = date.getUTCDate();\n        let weekDay = date.getUTCDay();\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n        if (weekDay >= firstDateOfWeek) {\n          wday = wday - weekDay + firstDateOfWeek;\n        } else {\n          wday = wday - (7 + weekDay) + firstDateOfWeek;\n        }\n        date.setUTCDate(wday);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n    }\n    if (!utc && unit != \"millisecond\") {\n      date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n      if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n        let newTimeZoneOffset = date.getTimezoneOffset();\n        if (newTimeZoneOffset != timeZoneOffset) {\n          let diff = newTimeZoneOffset - timeZoneOffset;\n          date.setUTCMinutes(date.getUTCMinutes() + diff);\n        }\n      }\n    }\n    return date;\n  } else {\n    if (isNaN(date.getTime())) {\n      return date;\n    }\n    let tzoffset = timezone.offsetUTC(date);\n    let timeZoneOffset = date.getTimezoneOffset();\n    let parsedDate = timezone.parseDate(date);\n    let year = parsedDate.year;\n    let month = parsedDate.month;\n    let day = parsedDate.day;\n    let hour = parsedDate.hour;\n    let minute = parsedDate.minute;\n    let second = parsedDate.second;\n    let millisecond = parsedDate.millisecond;\n    let weekday = parsedDate.weekday;\n    let offsetDif = tzoffset - timeZoneOffset;\n    switch (unit) {\n      case \"day\":\n        if (count > 1 && firstDate) {\n          firstDate = round(firstDate, \"day\", 1, firstDateOfWeek, utc, undefined, timezone);\n          let difference = date.getTime() - firstDate.getTime();\n          let unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          let duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration);\n          parsedDate = timezone.parseDate(date);\n          year = parsedDate.year;\n          month = parsedDate.month;\n          day = parsedDate.day;\n        }\n        hour = 0;\n        minute = offsetDif;\n        second = 0;\n        millisecond = 0;\n        break;\n      case \"second\":\n        minute += offsetDif;\n        if (count > 1) {\n          second = Math.floor(second / count) * count;\n        }\n        millisecond = 0;\n        break;\n      case \"millisecond\":\n        minute += offsetDif;\n        if (count > 1) {\n          millisecond = Math.floor(millisecond / count) * count;\n        }\n        break;\n      case \"hour\":\n        if (count > 1) {\n          hour = Math.floor(hour / count) * count;\n        }\n        minute = offsetDif;\n        second = 0;\n        millisecond = 0;\n        break;\n      case \"minute\":\n        if (count > 1) {\n          minute = Math.floor(minute / count) * count;\n        }\n        minute += offsetDif;\n        second = 0;\n        millisecond = 0;\n        break;\n      case \"month\":\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n        day = 1;\n        hour = 0;\n        minute = offsetDif;\n        second = 0;\n        millisecond = 0;\n        break;\n      case \"year\":\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n        month = 0;\n        day = 1;\n        hour = 0;\n        minute = offsetDif;\n        second = 0;\n        millisecond = 0;\n        break;\n      case \"week\":\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n        if (weekday >= firstDateOfWeek) {\n          day = day - weekday + firstDateOfWeek;\n        } else {\n          day = day - (7 + weekday) + firstDateOfWeek;\n        }\n        hour = 0;\n        minute = offsetDif;\n        second = 0;\n        millisecond = 0;\n        break;\n    }\n    date = new Date(year, month, day, hour, minute, second, millisecond);\n    let newTimeZoneOffset = date.getTimezoneOffset();\n    let newTzoffset = timezone.offsetUTC(date);\n    let newDiff = newTzoffset - newTimeZoneOffset;\n    if (newDiff != offsetDif) {\n      date.setTime(date.getTime() + (newDiff - offsetDif) * 60000);\n    }\n    return date;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function chooseInterval(index, duration, gridCount, intervals) {\n  let gridInterval = intervals[index];\n  let intervalDuration = getIntervalDuration(gridInterval);\n  let lastIndex = intervals.length - 1;\n  if (index >= lastIndex) {\n    return Object.assign({}, intervals[lastIndex]);\n  }\n  let count = Math.ceil(duration / intervalDuration);\n  if (duration < intervalDuration && index > 0) {\n    return Object.assign({}, intervals[index - 1]);\n  }\n  if (count <= gridCount) {\n    return Object.assign({}, intervals[index]);\n  } else {\n    if (index + 1 < intervals.length) {\n      return chooseInterval(index + 1, duration, gridCount, intervals);\n    } else {\n      return Object.assign({}, intervals[index]);\n    }\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function getUnitValue(date, unit) {\n  switch (unit) {\n    case \"day\":\n      return date.getDate();\n    case \"second\":\n      return date.getSeconds();\n    case \"millisecond\":\n      return date.getMilliseconds();\n    case \"hour\":\n      return date.getHours();\n    case \"minute\":\n      return date.getMinutes();\n    case \"month\":\n      return date.getMonth();\n    case \"year\":\n      return date.getFullYear();\n    case \"week\":\n      return $utils.getWeek(date);\n  }\n}","map":{"version":3,"names":["$type","$utils","sleep","ms","Promise","resolve","_reject","setTimeout","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","getIntervalDuration","interval","timeUnit","getDateIntervalDuration","date","firstDateOfWeek","utc","timezone","firstTime","round","Date","getTime","undefined","lastTime","now","copy","checkChange","timeOne","timeTwo","dateOne","dateTwo","convertLocal","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","add","timeZoneOffset","offsetUTC","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","endDays","startDays","setUTCMonth","wday","newTimeZoneOffset","diff","roun","time","root","firstDate","locale","firstDayOfWeek","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","isNumber","isNaN","tzoffset","parsedDate","parseDate","weekday","offsetDif","newTzoffset","newDiff","chooseInterval","index","gridCount","intervals","gridInterval","intervalDuration","lastIndex","length","Object","assign","ceil","getUnitValue","getDate","getSeconds","getMilliseconds","getHours","getMinutes","getMonth","getFullYear","getWeek"],"sources":["C:\\Users\\Moham\\Downloads\\Github projects\\Digital-Portfolio-main\\Frontend\\node_modules\\src\\.internal\\core\\util\\Time.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport type { Timezone } from \"./Timezone\";\nimport type { Root } from \"../Root\";\n\nexport type TimeUnit = \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\" | \"year\";\n\nexport interface ITimeInterval {\n\ttimeUnit: TimeUnit;\n\tcount: number;\n}\n\n\n/**\n * Returns a `Promise` which can be used to execute code after number of\n * milliseconds.\n *\n * @param   ms  Sleep duration in ms\n * @return      Promise\n */\nexport function sleep(ms: number): Promise<void> {\n\treturn new Promise((resolve, _reject) => {\n\t\tsetTimeout(resolve, ms);\n\t});\n}\n\n\n/**\n * Maps time period names to their numeric representations in milliseconds.\n *\n * @ignore Exclude from docs\n */\nexport let timeUnitDurations: { [Key in TimeUnit]: number } = {\n\tmillisecond: 1,\n\tsecond: 1000,\n\tminute: 60000,\n\thour: 3600000,\n\tday: 86400000,\n\tweek: 604800000,\n\tmonth: 365.242 / 12 * 86400000,\n\tyear: 31536000000\n};\n\n/**\n * Returns the next time unit that goes after source `unit`.\n *\n * E.g. \"hour\" is the next unit after \"minute\", etc.\n *\n * @ignore Exclude from docs\n * @param unit  Source time unit\n * @return Next time unit\n */\nexport function getNextUnit(unit: TimeUnit): TimeUnit | undefined {\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\treturn;\n\t\tcase \"month\":\n\t\t\treturn \"year\";\n\n\t\tcase \"week\":\n\t\t\treturn \"month\";\n\n\t\tcase \"day\":\n\t\t\treturn \"month\"; // not a mistake\n\n\t\tcase \"hour\":\n\t\t\treturn \"day\";\n\n\t\tcase \"minute\":\n\t\t\treturn \"hour\";\n\n\t\tcase \"second\":\n\t\t\treturn \"minute\"\n\n\t\tcase \"millisecond\":\n\t\t\treturn \"second\";\n\t}\n}\n\n/**\n * Returns number of milliseconds in the `count` of time `unit`.\n *\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\n * \"month\", and \"year\".\n *\n * @param unit   Time unit\n * @param count  Number of units\n * @return Milliseconds\n */\nexport function getDuration(unit: TimeUnit, count?: number): number {\n\tif (count == null) {\n\t\tcount = 1;\n\t}\n\treturn timeUnitDurations[unit] * count;\n}\n\n/**\n * @ignore\n */\nexport function getIntervalDuration(interval: ITimeInterval | undefined) {\n\tif (interval) {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\treturn 0;\n}\n\n\nexport function getDateIntervalDuration(interval: ITimeInterval, date: Date, firstDateOfWeek?: number, utc?: boolean, timezone?: Timezone) {\n\tconst unit = interval.timeUnit;\n\tconst count = interval.count;\n\tif (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\telse {\n\t\tconst firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n\t\tlet lastTime = firstTime + count * getDuration(unit) * 1.05;\n\t\tlastTime = round(new Date(lastTime), unit, 1, firstDateOfWeek, utc, undefined, timezone).getTime();\n\t\treturn lastTime - firstTime;\n\t}\n}\n\n/**\n * Returns current `Date` object.\n *\n * @return Current date\n */\nexport function now(): Date {\n\treturn new Date();\n}\n\n/**\n * Returns current timestamp.\n *\n * @return Current timestamp\n */\nexport function getTime(): number {\n\treturn now().getTime();\n}\n\n/**\n * Returns a copy of the `Date` object.\n *\n * @param date  Source date\n * @return Copy\n */\nexport function copy(date: Date): Date {\n\treturn new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n\n/**\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\n * represent a \"range\" of time, rather the same time date.\n *\n * @param timeOne  timestamp\n * @param timeTwo  timestamp\n * @param unit     Time unit to check\n * @return Range?\n */\nexport function checkChange(timeOne: number, timeTwo: number, unit: TimeUnit, utc?: boolean, timezone?: Timezone): boolean {\n\t// quick\n\tif ((timeTwo - timeOne) > getDuration(unit, 1.2)) {\n\t\treturn true;\n\t}\n\n\tlet dateOne = new Date(timeOne);\n\tlet dateTwo = new Date(timeTwo);\n\n\tif (timezone) {\n\t\tdateOne = timezone.convertLocal(dateOne);\n\t\tdateTwo = timezone.convertLocal(dateTwo);\n\t}\n\n\tlet timeZoneOffset1 = 0;\n\tlet timeZoneOffset2 = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset1 = dateOne.getTimezoneOffset();\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n\n\t\ttimeZoneOffset2 = dateTwo.getTimezoneOffset();\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n\t}\n\n\tlet changed = false;\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"month\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"day\":\n\t\t\tif (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tif (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tif (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tif (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tif (dateOne.getTime() != dateTwo.getTime()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif (changed) {\n\t\treturn changed;\n\t}\n\n\tlet nextUnit = getNextUnit(unit);\n\tif (nextUnit) {\n\t\treturn checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n/**\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\n *\n * @param date   Source date\n * @param unit   Time unit\n * @param count  Number of units to add\n * @return Modified date\n */\nexport function add(date: Date, unit: TimeUnit, count: number, utc?: boolean, timezone?: Timezone): Date {\n\tlet timeZoneOffset = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset = date.getTimezoneOffset();\n\n\t\tif (timezone) {\n\t\t\ttimeZoneOffset -= timezone.offsetUTC(date);\n\t\t}\n\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t}\n\n\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\tlet day: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(day + count);\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tlet seconds: number = date.getUTCSeconds();\n\t\t\tdate.setUTCSeconds(seconds + count);\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tlet milliseconds: number = date.getUTCMilliseconds();\n\t\t\tdate.setUTCMilliseconds(milliseconds + count);\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tlet hours: number = date.getUTCHours();\n\t\t\tdate.setUTCHours(hours + count);\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tlet minutes: number = date.getUTCMinutes();\n\t\t\tdate.setUTCMinutes(minutes + count);\n\t\t\tbreak;\n\n\t\tcase \"year\":\n\t\t\tlet year: number = date.getUTCFullYear();\n\t\t\tdate.setUTCFullYear(year + count);\n\t\t\tbreak;\n\n\t\tcase \"month\":\n\t\t\tconst endDays = date.getUTCDate();\n\t\t\tconst startDays = new Date(date.getUTCFullYear(), date.getUTCMonth(), 0).getUTCDate();\n\t\t\tlet month: number = date.getUTCMonth();\n\t\t\tif (endDays > startDays) {\n\t\t\t\tdate.setUTCMonth(month + count, startDays);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdate.setUTCMonth(month + count);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"week\":\n\t\t\tlet wday: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(wday + count * 7);\n\t\t\tbreak;\n\t}\n\n\n\tif (!utc && unit != \"millisecond\") {\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\n\t\t\tif (timezone) {\n\t\t\t\tnewTimeZoneOffset += timezone.offsetUTC(date);\n\t\t\t}\n\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\n\t\t\t\t// solves issues if new time falls back to old time zone\n\t\t\t\tif (date.getTimezoneOffset() != newTimeZoneOffset) {\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn date;\n}\n\n/**\n * @ignore\n */\nexport function roun(time: number, unit: TimeUnit, count: number, root: Root, firstTime?: number): number {\n\tlet firstDate;\n\tif (firstTime != null) {\n\t\tfirstDate = new Date(firstTime);\n\t}\n\treturn round(new Date(time), unit, count, root.locale.firstDayOfWeek, root.utc, firstDate, root.timezone).getTime();\n}\n\n\n/**\n * \"Rounds\" the date to specific time unit.\n *\n * @param date             Source date\n * @param unit             Time unit\n * @param count            Number of units to round to\n * @param firstDateOfWeek  First day of week\n * @param utc              Use UTC timezone\n * @param firstDate        First date to round to\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\n * @param timezone         Use specific named timezone when rounding\n * @return New date\n */\nexport function round(date: Date, unit: TimeUnit, count: number, firstDateOfWeek?: number, utc?: boolean, firstDate?: Date, timezone?: Timezone): Date {\n\tif (!timezone || utc) {\n\n\t\tlet timeZoneOffset = 0;\n\n\t\tif (!utc && unit != \"millisecond\") {\n\t\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t\t}\n\n\t\tswitch (unit) {\n\n\t\t\tcase \"day\":\n\t\t\t\tlet day = date.getUTCDate();\n\n\t\t\t\tif (count > 1) {\n\t\t\t\t\t//\tday = Math.floor(day / count) * count;\n\t\t\t\t\tif (firstDate) {\n\t\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\n\n\t\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdate.setUTCDate(day);\n\t\t\t\t}\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"second\":\n\t\t\t\tlet seconds = date.getUTCSeconds();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tseconds = Math.floor(seconds / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCSeconds(seconds, 0);\n\t\t\t\tbreak;\n\n\t\t\tcase \"millisecond\":\n\t\t\t\tif (count == 1) {\n\t\t\t\t\treturn date; // much better for perf!\n\t\t\t\t}\n\n\t\t\t\tlet milliseconds = date.getUTCMilliseconds();\n\t\t\t\tmilliseconds = Math.floor(milliseconds / count) * count;\n\t\t\t\tdate.setUTCMilliseconds(milliseconds);\n\t\t\t\tbreak;\n\n\t\t\tcase \"hour\":\n\n\t\t\t\tlet hours = date.getUTCHours();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\thours = Math.floor(hours / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCHours(hours, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"minute\":\n\n\t\t\t\tlet minutes = date.getUTCMinutes();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tminutes = Math.floor(minutes / count) * count;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCMinutes(minutes, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"month\":\n\n\t\t\t\tlet month = date.getUTCMonth();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCMonth(month, 1);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"year\":\n\n\t\t\t\tlet year = date.getUTCFullYear();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCFullYear(year, 0, 1);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\t\t\tbreak;\n\n\t\t\tcase \"week\":\n\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tif (firstDate) {\n\t\t\t\t\t\tfirstDate = round(firstDate, \"week\", 1);\n\n\t\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"week\") / count);\n\t\t\t\t\t\tlet duration = getDuration(\"week\", unitCount * count);\n\n\t\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet wday = date.getUTCDate();\n\t\t\t\tlet weekDay = date.getUTCDay();\n\n\t\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t\t}\n\n\t\t\t\tif (weekDay >= firstDateOfWeek) {\n\t\t\t\t\twday = wday - weekDay + firstDateOfWeek;\n\t\t\t\t} else {\n\t\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCDate(wday);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\t\t}\n\t\tif (!utc && unit != \"millisecond\") {\n\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn date;\n\t}\n\telse {\n\t\tif (isNaN(date.getTime())) {\n\t\t\treturn date;\n\t\t}\n\t\tlet tzoffset = timezone.offsetUTC(date);\n\t\tlet timeZoneOffset = date.getTimezoneOffset();\n\t\tlet parsedDate = timezone.parseDate(date);\n\t\tlet year = parsedDate.year;\n\t\tlet month = parsedDate.month;\n\t\tlet day = parsedDate.day;\n\t\tlet hour = parsedDate.hour;\n\t\tlet minute = parsedDate.minute;\n\t\tlet second = parsedDate.second;\n\t\tlet millisecond = parsedDate.millisecond;\n\t\tlet weekday = parsedDate.weekday;\n\n\t\tlet offsetDif = tzoffset - timeZoneOffset;\n\n\t\tswitch (unit) {\n\n\t\t\tcase \"day\":\n\t\t\t\tif (count > 1 && firstDate) {\n\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1, firstDateOfWeek, utc, undefined, timezone);\n\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\tdate.setTime(firstDate.getTime() + duration);\n\n\t\t\t\t\tparsedDate = timezone.parseDate(date);\n\n\t\t\t\t\tyear = parsedDate.year;\n\t\t\t\t\tmonth = parsedDate.month;\n\t\t\t\t\tday = parsedDate.day;\n\t\t\t\t}\n\n\t\t\t\thour = 0;\n\t\t\t\tminute = offsetDif;\n\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"second\":\n\t\t\t\tminute += offsetDif;\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tsecond = Math.floor(second / count) * count;\n\t\t\t\t}\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"millisecond\":\n\t\t\t\tminute += offsetDif;\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmillisecond = Math.floor(millisecond / count) * count;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"hour\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\thour = Math.floor(hour / count) * count;\n\t\t\t\t}\n\t\t\t\tminute = offsetDif;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"minute\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tminute = Math.floor(minute / count) * count;\n\t\t\t\t}\n\t\t\t\tminute += offsetDif;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"month\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t\t}\n\t\t\t\tday = 1;\n\t\t\t\thour = 0;\n\t\t\t\tminute = offsetDif;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"year\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t\t}\n\t\t\t\tmonth = 0;\n\t\t\t\tday = 1;\n\t\t\t\thour = 0;\n\t\t\t\tminute = offsetDif;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"week\":\n\t\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t\t}\n\n\t\t\t\tif (weekday >= firstDateOfWeek) {\n\t\t\t\t\tday = day - weekday + firstDateOfWeek;\n\t\t\t\t} else {\n\t\t\t\t\tday = day - (7 + weekday) + firstDateOfWeek;\n\t\t\t\t}\n\n\t\t\t\thour = 0;\n\t\t\t\tminute = offsetDif;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tdate = new Date(year, month, day, hour, minute, second, millisecond);\n\n\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\tlet newTzoffset = timezone.offsetUTC(date);\n\t\tlet newDiff = newTzoffset - newTimeZoneOffset;\n\n\t\tif (newDiff != offsetDif) {\n\t\t\tdate.setTime(date.getTime() + (newDiff - offsetDif) * 60000);\n\t\t}\n\n\t\treturn date;\n\t}\n}\n\n\n\n/**\n * @ignore\n */\nexport function chooseInterval(index: number, duration: number, gridCount: number, intervals: Array<ITimeInterval>): ITimeInterval {\n\tlet gridInterval: ITimeInterval = intervals[index];\n\tlet intervalDuration = getIntervalDuration(gridInterval);\n\n\tlet lastIndex = intervals.length - 1;\n\tif (index >= lastIndex) {\n\t\treturn { ...intervals[lastIndex] };\n\t}\n\n\tlet count = Math.ceil(duration / intervalDuration);\n\n\tif (duration < intervalDuration && index > 0) {\n\t\treturn { ...intervals[index - 1] };\n\t}\n\tif (count <= gridCount) {\n\t\treturn { ...intervals[index] };\n\t} else {\n\t\tif (index + 1 < intervals.length) {\n\t\t\treturn chooseInterval(index + 1, duration, gridCount, intervals);\n\t\t} else {\n\t\t\treturn { ...intervals[index] };\n\t\t}\n\t}\n}\n\n/**\n * @ignore\n */\nexport function getUnitValue(date: Date, unit: TimeUnit) {\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\treturn date.getDate();\n\t\tcase \"second\":\n\t\t\treturn date.getSeconds();\n\t\tcase \"millisecond\":\n\t\t\treturn date.getMilliseconds();\n\t\tcase \"hour\":\n\t\t\treturn date.getHours();\n\t\tcase \"minute\":\n\t\t\treturn date.getMinutes();\n\t\tcase \"month\":\n\t\t\treturn date.getMonth();\n\t\tcase \"year\":\n\t\t\treturn date.getFullYear();\n\t\tcase \"week\":\n\t\t\treturn $utils.getWeek(date);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}